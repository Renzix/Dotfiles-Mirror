{
	"name": "cpptools",
	"displayName": "C/C++",
	"description": "C/C++ IntelliSense, debugging, and code browsing.",
	"version": "0.16.1",
	"publisher": "ms-vscode",
	"preview": true,
	"icon": "LanguageCCPP_color_128x.png",
	"readme": "README.md",
	"author": {
		"name": "Microsoft Corporation"
	},
	"license": "SEE LICENSE IN LICENSE.txt",
	"engines": {
		"vscode": "^1.17.0"
	},
	"bugs": {
		"url": "https://github.com/Microsoft/vscode-cpptools/issues",
		"email": "c_cpp_support@microsoft.com"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/Microsoft/vscode-cpptools.git"
	},
	"homepage": "https://github.com/Microsoft/vscode-cpptools",
	"qna": "https://github.com/Microsoft/vscode-cpptools/issues",
	"keywords": [
		"C",
		"C++",
		"IntelliSense",
		"Microsoft",
		"multi-root ready"
	],
	"categories": [
		"Languages",
		"Debuggers",
		"Formatters",
		"Linters"
	],
	"activationEvents": [
		"onLanguage:cpp",
		"onLanguage:c",
		"onCommand:extension.pickNativeProcess",
		"onCommand:extension.pickRemoteNativeProcess",
		"onCommand:C_Cpp.ConfigurationEdit",
		"onCommand:C_Cpp.ConfigurationSelect",
		"onCommand:C_Cpp.SwitchHeaderSource",
		"onCommand:C_Cpp.Navigate",
		"onCommand:C_Cpp.GoToDeclaration",
		"onCommand:C_Cpp.PeekDeclaration",
		"onCommand:C_Cpp.ToggleErrorSquiggles",
		"onCommand:C_Cpp.ToggleIncludeFallback",
		"onCommand:C_Cpp.ToggleDimInactiveRegions",
		"onCommand:C_Cpp.ShowReleaseNotes",
		"onCommand:C_Cpp.ResetDatabase",
		"onCommand:C_Cpp.PauseParsing",
		"onCommand:C_Cpp.ResumeParsing",
		"onCommand:C_Cpp.ShowParsingCommands",
		"onCommand:C_Cpp.TakeSurvey",
		"onDebug"
	],
	"main": "./out/src/main",
	"contributes": {
		"problemMatchers": [
			{
				"name": "gcc",
				"owner": "cpptools",
				"fileLocation": [
					"relative",
					"${workspaceFolder}"
				],
				"pattern": {
					"regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$",
					"file": 1,
					"line": 2,
					"column": 3,
					"severity": 4,
					"message": 5
				}
			}
		],
		"configuration": {
			"type": "object",
			"title": "C/C++ Configuration",
			"properties": {
				"C_Cpp.clang_format_path": {
					"type": [
						"string",
						"null"
					],
					"default": null,
					"description": "The full path of the clang-format executable.",
					"scope": "resource"
				},
				"C_Cpp.clang_format_style": {
					"type": "string",
					"default": "file",
					"description": "Coding style, currently supports: Visual Studio, LLVM, Google, Chromium, Mozilla, WebKit. Use \"file\" to load the style from a .clang-format file in the current or parent directory. Use \"{key: value, ...}\" to set specific parameters, e.g.: \"{ BasedOnStyle: LLVM, IndentWidth: 8 }\"",
					"scope": "resource"
				},
				"C_Cpp.clang_format_fallbackStyle": {
					"type": "string",
					"default": "Visual Studio",
					"description": "Name of the predefined style used as a fallback in case clang-format is invoked with style \"file\" but the .clang-format file is not found. Possible values are Visual Studio, LLVM, Google, Chromium, Mozilla, WebKit, none, or use \"{key: value, ...}\" to set specific parameters, e.g.: \"{ BasedOnStyle: LLVM, IndentWidth: 8 }\"",
					"scope": "resource"
				},
				"C_Cpp.clang_format_sortIncludes": {
					"type": [
						"boolean",
						"null"
					],
					"enum": [
						true,
						false,
						null
					],
					"default": null,
					"description": "If set, overrides the include sorting behavior determined by the SortIncludes parameter.",
					"scope": "resource"
				},
				"C_Cpp.intelliSenseEngine": {
					"type": "string",
					"enum": [
						"Default",
						"Tag Parser"
					],
					"default": "Default",
					"description": "Controls the IntelliSense provider. \"Tag Parser\" provides \"fuzzy\" results that are not context-aware. \"Default\" provides context-aware results and is in preview mode - member list, hover tooltips, and error squiggles are currently implemented. Features not yet implemented in the new default engine will use the tag parser engine instead.",
					"scope": "resource"
				},
				"C_Cpp.intelliSenseEngineFallback": {
					"type": "string",
					"enum": [
						"Enabled",
						"Disabled"
					],
					"default": "Enabled",
					"description": "Controls whether the IntelliSense engine will automatically switch to the Tag Parser for translation units containing #include errors.",
					"scope": "resource"
				},
				"C_Cpp.autocomplete": {
					"type": "string",
					"enum": [
						"Default",
						"Disabled"
					],
					"default": "Default",
					"description": "Controls the auto-completion provider. \"Default\" uses the active IntelliSense engine. \"Disabled\" uses the word-based completion provided by Visual Studio Code.",
					"scope": "resource"
				},
				"C_Cpp.errorSquiggles": {
					"type": "string",
					"enum": [
						"Enabled",
						"Disabled"
					],
					"default": "Enabled",
					"description": "Controls whether suspected compile errors detected by the IntelliSense engine will be reported back to the editor. Warnings about #includes that could not be located will always be reported to the editor. This setting is ignored by the Tag Parser engine.",
					"scope": "resource"
				},
				"C_Cpp.dimInactiveRegions": {
					"type": "boolean",
					"default": true,
					"description": "Controls whether inactive preprocessor blocks are colored differently than active code. This setting is ignored by the Tag Parser engine.",
					"scope": "resource"
				},
				"C_Cpp.formatting": {
					"type": "string",
					"enum": [
						"Default",
						"Disabled"
					],
					"default": "Default",
					"description": "\"Default\" enables code formatting. \"Disabled\" disables code formatting.",
					"scope": "resource"
				},
				"C_Cpp.navigation.length": {
					"type": "number",
					"default": 60,
					"description": "Maximum character length of the scope/navigation UI in the status bar. The UI may not appear if this value is too large.",
					"scope": "resource"
				},
				"C_Cpp.loggingLevel": {
					"type": "string",
					"enum": [
						"None",
						"Error",
						"Warning",
						"Information"
					],
					"default": "Error",
					"description": "The verbosity of logging in the Output Panel. The order of levels from least verbose to most verbose is: None < Error < Warning < Information.",
					"scope": "resource"
				},
				"C_Cpp.autoAddFileAssociations": {
					"type": "boolean",
					"default": true,
					"description": "Controls whether files are automatically added to files.associations when they are the target of a navigation operation from a C/C++ file.",
					"scope": "resource"
				},
				"C_Cpp.workspaceParsingPriority": {
					"type": "string",
					"enum": [
						"highest",
						"high",
						"medium",
						"low"
					],
					"default": "highest",
					"description": "Controls whether parsing of the non-active workspace files uses sleeps to avoid using 100% CPU. The values highest/high/medium/low correspond to approximately 100/75/50/25% CPU usage.",
					"scope": "resource"
				},
				"C_Cpp.exclusionPolicy": {
					"type": "string",
					"enum": [
						"checkFolders",
						"checkFilesAndFolders"
					],
					"default": "checkFolders",
					"description": "Instructs the extension when to use the \"files.exclude\" setting when determining which files should be added to the code navigation database while traversing through the paths in the \"browse.path\" array. \"checkFolders\" means that the exclusion filters will only be evaluated once per folder (individual files are not checked). \"checkFilesAndFolders\" means that the exclusion filters will be evaluated against every file and folder encountered. If your \"files.exclude\" setting only contains folders, then \"checkFolders\" is the best choice and will increase the speed at which the extension can initialize the code navigation database.",
					"scope": "resource"
				},
				"C_Cpp.commentContinuationPatterns": {
					"type": "array",
					"default": [
						"/**"
					],
					"items": {
						"anyOf": [
							{
								"type": "string",
								"description": "The pattern that begins a multiline or single line comment block. The continuation pattern defaults to ' * ' for multiline comment blocks or this string for single line comment blocks."
							},
							{
								"type": "object",
								"properties": {
									"begin": {
										"type": "string",
										"description": "The pattern that begins a multiline or single line comment block."
									},
									"continue": {
										"type": "string",
										"description": "The text that will be inserted on the next line when Enter is pressed inside a multiline or single line comment block."
									}
								}
							}
						]
					},
					"description": "Defines the editor behavior for when the Enter key is pressed inside a multiline or single line comment block.",
					"scope": "resource"
				}
			}
		},
		"commands": [
			{
				"command": "C_Cpp.ConfigurationSelect",
				"title": "Select a Configuration...",
				"category": "C/Cpp"
			},
			{
				"command": "C_Cpp.ConfigurationEdit",
				"title": "Edit Configurations...",
				"category": "C/Cpp"
			},
			{
				"command": "C_Cpp.GoToDeclaration",
				"title": "Go to Declaration",
				"category": "C/Cpp"
			},
			{
				"command": "C_Cpp.PeekDeclaration",
				"title": "Peek Declaration",
				"category": "C/Cpp"
			},
			{
				"command": "C_Cpp.SwitchHeaderSource",
				"title": "Switch Header/Source",
				"category": "C/Cpp"
			},
			{
				"command": "C_Cpp.Navigate",
				"title": "Navigate...",
				"category": "C/Cpp"
			},
			{
				"command": "C_Cpp.ToggleErrorSquiggles",
				"title": "Toggle Error Squiggles",
				"category": "C/Cpp"
			},
			{
				"command": "C_Cpp.ToggleIncludeFallback",
				"title": "Toggle IntelliSense Engine Fallback on Include Errors",
				"category": "C/Cpp"
			},
			{
				"command": "C_Cpp.ToggleDimInactiveRegions",
				"title": "Toggle Inactive Region Colorization",
				"category": "C/Cpp"
			},
			{
				"command": "workbench.action.gotoSymbol",
				"title": "Go to Symbol in File..."
			},
			{
				"command": "workbench.action.showAllSymbols",
				"title": "Go to Symbol in Workspace..."
			},
			{
				"command": "C_Cpp.ShowReleaseNotes",
				"title": "Show Release Notes",
				"category": "C/Cpp"
			},
			{
				"command": "C_Cpp.ResetDatabase",
				"title": "Reset IntelliSense Database",
				"category": "C/Cpp"
			},
			{
				"command": "C_Cpp.PauseParsing",
				"title": "Pause Parsing",
				"category": "C/Cpp"
			},
			{
				"command": "C_Cpp.ResumeParsing",
				"title": "Resume Parsing",
				"category": "C/Cpp"
			},
			{
				"command": "C_Cpp.ShowParsingCommands",
				"title": "Show Parsing Commands",
				"category": "C/Cpp"
			},
			{
				"command": "C_Cpp.TakeSurvey",
				"title": "Take Survey",
				"category": "C/Cpp"
			}
		],
		"keybindings": [
			{
				"command": "C_Cpp.GoToDeclaration",
				"key": "Ctrl+F12",
				"when": "editorTextFocus && editorLangId == 'cpp'"
			},
			{
				"command": "C_Cpp.GoToDeclaration",
				"key": "Ctrl+F12",
				"when": "editorTextFocus && editorLangId == 'c'"
			},
			{
				"command": "C_Cpp.PeekDeclaration",
				"key": "Ctrl+Alt+F12",
				"when": "editorTextFocus && editorLangId == 'cpp'"
			},
			{
				"command": "C_Cpp.PeekDeclaration",
				"key": "Ctrl+Alt+F12",
				"when": "editorTextFocus && editorLangId == 'c'"
			},
			{
				"command": "C_Cpp.SwitchHeaderSource",
				"key": "Alt+O",
				"when": "editorTextFocus && editorLangId == 'cpp'"
			},
			{
				"command": "C_Cpp.SwitchHeaderSource",
				"key": "Alt+O",
				"when": "editorTextFocus && editorLangId == 'c'"
			},
			{
				"command": "C_Cpp.Navigate",
				"key": "Alt+N",
				"when": "editorTextFocus && editorLangId == 'cpp'"
			},
			{
				"command": "C_Cpp.Navigate",
				"key": "Alt+N",
				"when": "editorTextFocus && editorLangId == 'c'"
			}
		],
		"debuggers": [
			{
				"type": "cppdbg",
				"label": "C++ (GDB/LLDB)",
				"enableBreakpointsFor": {
					"languageIds": [
						"c",
						"cpp"
					]
				},
				"adapterExecutableCommand": "extension.cppdbgAdapterExecutableCommand",
				"aiKey": "AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217",
				"variables": {
					"pickProcess": "extension.pickNativeProcess",
					"pickRemoteProcess": "extension.pickRemoteNativeProcess"
				},
				"configurationAttributes": {
					"launch": {
						"required": [
							"name",
							"type",
							"request",
							"program"
						],
						"properties": {
							"program": {
								"type": "string",
								"description": "Full path to program executable.",
								"default": "${workspaceRoot}/a.out",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"args": {
								"type": "array",
								"description": "Command line arguments passed to the program.",
								"items": {
									"type": "string"
								},
								"default": [],
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"type": {
								"enum": [
									"cppdbg"
								],
								"description": "Type of configuration.",
								"pattern": "^(?!node2)",
								"errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
								"patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
							},
							"targetArchitecture": {
								"type": "string",
								"description": "The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.",
								"default": "x64",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"cwd": {
								"type": "string",
								"description": "The working directory of the target",
								"default": ".",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"setupCommands": {
								"type": "array",
								"description": "One or more GDB/LLDB commands to execute in order to setup the underlying debugger. Example: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].",
								"items": {
									"type": "object",
									"properties": {
										"text": {
											"type": "string",
											"description": "The debugger command to execute.",
											"default": ""
										},
										"description": {
											"type": "string",
											"description": "Optional description for the command.",
											"default": ""
										},
										"ignoreFailures": {
											"type": "boolean",
											"description": "If true, failures from the command should be ignored. Default value is false.",
											"default": false
										}
									}
								},
								"default": [],
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"customLaunchSetupCommands": {
								"type": "array",
								"description": "If provided, this replaces the default commands used to launch a target with some other commands. For example, this can be \"-target-attach\" in order to attach to a target process. An empty command list replaces the launch commands with nothing, which can be useful if the debugger is being provided launch options as command line options. Example: \"customLaunchSetupCommands\": [ { \"text\": \"target-run\", \"description\": \"run target\", \"ignoreFailures\": false }].",
								"items": {
									"type": "object",
									"properties": {
										"text": {
											"type": "string",
											"description": "The debugger command to execute.",
											"default": ""
										},
										"description": {
											"type": "string",
											"description": "Optional description for the command.",
											"default": ""
										},
										"ignoreFailures": {
											"type": "boolean",
											"description": "If true, failures from the command should be ignored. Default value is false.",
											"default": false
										}
									}
								},
								"default": [],
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"launchCompleteCommand": {
								"enum": [
									"exec-run",
									"exec-continue",
									"None"
								],
								"description": "The command to execute after the debugger is fully setup in order to cause the target process to run. Allowed values are \"exec-run\", \"exec-continue\", \"None\". The default value is \"exec-run\".",
								"default": "exec-run",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"visualizerFile": {
								"type": "string",
								"description": ".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.",
								"default": "",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"showDisplayString": {
								"type": "boolean",
								"description": "When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.",
								"default": true,
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"environment": {
								"type": "array",
								"description": "Environment variables to add to the environment for the program. Example: [ { \"name\": \"squid\", \"value\": \"clam\" } ].",
								"items": {
									"type": "object",
									"properties": {
										"name": "string",
										"value": "string"
									}
								},
								"default": [],
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"additionalSOLibSearchPath": {
								"type": "string",
								"description": "Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".",
								"default": "",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"MIMode": {
								"type": "string",
								"description": "Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".",
								"default": "gdb",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"miDebuggerPath": {
								"type": "string",
								"description": "The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.",
								"default": "/usr/bin/gdb",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"miDebuggerServerAddress": {
								"type": "string",
								"description": "Network address of the MI Debugger Server to connect to (example: localhost:1234).",
								"default": "serveraddress:port",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"stopAtEntry": {
								"type": "boolean",
								"description": "Optional parameter. If true, the debugger should stop at the entrypoint of the target. If processId is passed, has no effect.",
								"default": false,
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"debugServerPath": {
								"type": "string",
								"description": "Optional full path to debug server to launch. Defaults to null.",
								"default": "",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"debugServerArgs": {
								"type": "string",
								"description": "Optional debug server args. Defaults to null.",
								"default": "",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"serverStarted": {
								"type": "string",
								"description": "Optional server-started pattern to look for in the debug server output. Defaults to null.",
								"default": "",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"filterStdout": {
								"type": "boolean",
								"description": "Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.",
								"default": true,
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"filterStderr": {
								"type": "boolean",
								"description": "Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.",
								"default": false,
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"serverLaunchTimeout": {
								"type": "integer",
								"description": "Optional time, in milliseconds, for the debugger to wait for the debugServer to start up. Default is 10000.",
								"default": "10000",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"coreDumpPath": {
								"type": "string",
								"description": "Optional full path to a core dump file for the specified program. Defaults to null.",
								"default": "",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"externalConsole": {
								"type": "boolean",
								"description": "If true, a console is launched for the debuggee. If false, no console is launched. Note this option is ignored in some cases for technical reasons.",
								"default": false,
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"sourceFileMap": {
								"type": "object",
								"description": "Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'",
								"default": {
									"<source-path>": "<target-path>"
								},
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"logging": {
								"type": "object",
								"description": "Optional flags to determine what types of messages should be logged to the Debug Console.",
								"default": {},
								"properties": {
									"exceptions": {
										"type": "boolean",
										"description": "Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.",
										"default": true
									},
									"moduleLoad": {
										"type": "boolean",
										"description": "Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.",
										"default": true
									},
									"programOutput": {
										"type": "boolean",
										"description": "Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.",
										"default": true
									},
									"engineLogging": {
										"type": "boolean",
										"description": "Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.",
										"default": false
									},
									"trace": {
										"type": "boolean",
										"description": "Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.",
										"default": false
									},
									"traceResponse": {
										"type": "boolean",
										"description": "Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.",
										"default": false
									}
								},
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"pipeTransport": {
								"description": "When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).",
								"type": "object",
								"default": {
									"pipeCwd": "${workspaceRoot}",
									"pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
									"pipeArgs": [],
									"debuggerPath": "enter the path for the debugger on the target machine, for example /usr/bin/gdb"
								},
								"properties": {
									"pipeCwd": {
										"type": "string",
										"description": "The fully qualified path to the working directory for the pipe program.",
										"default": "/usr/bin"
									},
									"pipeProgram": {
										"type": "string",
										"description": "The fully qualified pipe command to execute.",
										"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
									},
									"pipeArgs": {
										"type": "array",
										"description": "Command line arguments passed to the pipe program to configure the connection.",
										"items": {
											"type": "string"
										},
										"default": []
									},
									"debuggerPath": {
										"type": "string",
										"description": "The full path to the debugger on the target machine, for example /usr/bin/gdb.",
										"default": "The full path to the debugger on the target machine, for example /usr/bin/gdb."
									},
									"pipeEnv": {
										"type": "object",
										"additionalProperties": {
											"type": "string"
										},
										"description": "Environment variables passed to the pipe program.",
										"default": {}
									}
								},
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"name": {
								"type": "string",
								"description": "Name of configuration; appears in the launch configuration drop down menu.",
								"default": "Launch",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"request": {
								"enum": [
									"launch"
								],
								"description": "Request type of configuration. Can be \"launch\" or \"attach\".",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"debugServer": {
								"type": "number",
								"description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
								"default": 4711,
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"preLaunchTask": {
								"type": [
									"string",
									"null"
								],
								"default": null,
								"description": "Task to run before debug session starts.",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"internalConsoleOptions": {
								"enum": [
									"neverOpen",
									"openOnSessionStart",
									"openOnFirstSessionStart"
								],
								"default": "openOnFirstSessionStart",
								"description": "Controls behavior of the internal debug console.",
								"scope": 1,
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"windows": {
								"type": "object",
								"description": "Windows specific launch configuration attributes.",
								"properties": {
									"program": {
										"type": "string",
										"description": "Full path to program executable.",
										"default": "${workspaceRoot}/a.out"
									},
									"args": {
										"type": "array",
										"description": "Command line arguments passed to the program.",
										"items": {
											"type": "string"
										},
										"default": []
									},
									"type": {
										"enum": [
											"cppdbg"
										],
										"description": "Type of configuration.",
										"pattern": "^(?!node2)",
										"errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
										"patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
									},
									"targetArchitecture": {
										"type": "string",
										"description": "The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.",
										"default": "x64"
									},
									"cwd": {
										"type": "string",
										"description": "The working directory of the target",
										"default": "."
									},
									"setupCommands": {
										"type": "array",
										"description": "One or more GDB/LLDB commands to execute in order to setup the underlying debugger. Example: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].",
										"items": {
											"type": "object",
											"properties": {
												"text": {
													"type": "string",
													"description": "The debugger command to execute.",
													"default": ""
												},
												"description": {
													"type": "string",
													"description": "Optional description for the command.",
													"default": ""
												},
												"ignoreFailures": {
													"type": "boolean",
													"description": "If true, failures from the command should be ignored. Default value is false.",
													"default": false
												}
											}
										},
										"default": []
									},
									"customLaunchSetupCommands": {
										"type": "array",
										"description": "If provided, this replaces the default commands used to launch a target with some other commands. For example, this can be \"-target-attach\" in order to attach to a target process. An empty command list replaces the launch commands with nothing, which can be useful if the debugger is being provided launch options as command line options. Example: \"customLaunchSetupCommands\": [ { \"text\": \"target-run\", \"description\": \"run target\", \"ignoreFailures\": false }].",
										"items": {
											"type": "object",
											"properties": {
												"text": {
													"type": "string",
													"description": "The debugger command to execute.",
													"default": ""
												},
												"description": {
													"type": "string",
													"description": "Optional description for the command.",
													"default": ""
												},
												"ignoreFailures": {
													"type": "boolean",
													"description": "If true, failures from the command should be ignored. Default value is false.",
													"default": false
												}
											}
										},
										"default": []
									},
									"launchCompleteCommand": {
										"enum": [
											"exec-run",
											"exec-continue",
											"None"
										],
										"description": "The command to execute after the debugger is fully setup in order to cause the target process to run. Allowed values are \"exec-run\", \"exec-continue\", \"None\". The default value is \"exec-run\".",
										"default": "exec-run"
									},
									"visualizerFile": {
										"type": "string",
										"description": ".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.",
										"default": ""
									},
									"showDisplayString": {
										"type": "boolean",
										"description": "When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.",
										"default": true
									},
									"environment": {
										"type": "array",
										"description": "Environment variables to add to the environment for the program. Example: [ { \"name\": \"squid\", \"value\": \"clam\" } ].",
										"items": {
											"type": "object",
											"properties": {
												"name": "string",
												"value": "string"
											}
										},
										"default": []
									},
									"additionalSOLibSearchPath": {
										"type": "string",
										"description": "Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".",
										"default": ""
									},
									"MIMode": {
										"type": "string",
										"description": "Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".",
										"default": "gdb"
									},
									"miDebuggerPath": {
										"type": "string",
										"description": "The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.",
										"default": "/usr/bin/gdb"
									},
									"miDebuggerServerAddress": {
										"type": "string",
										"description": "Network address of the MI Debugger Server to connect to (example: localhost:1234).",
										"default": "serveraddress:port"
									},
									"stopAtEntry": {
										"type": "boolean",
										"description": "Optional parameter. If true, the debugger should stop at the entrypoint of the target. If processId is passed, has no effect.",
										"default": false
									},
									"debugServerPath": {
										"type": "string",
										"description": "Optional full path to debug server to launch. Defaults to null.",
										"default": ""
									},
									"debugServerArgs": {
										"type": "string",
										"description": "Optional debug server args. Defaults to null.",
										"default": ""
									},
									"serverStarted": {
										"type": "string",
										"description": "Optional server-started pattern to look for in the debug server output. Defaults to null.",
										"default": ""
									},
									"filterStdout": {
										"type": "boolean",
										"description": "Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.",
										"default": true
									},
									"filterStderr": {
										"type": "boolean",
										"description": "Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.",
										"default": false
									},
									"serverLaunchTimeout": {
										"type": "integer",
										"description": "Optional time, in milliseconds, for the debugger to wait for the debugServer to start up. Default is 10000.",
										"default": "10000"
									},
									"coreDumpPath": {
										"type": "string",
										"description": "Optional full path to a core dump file for the specified program. Defaults to null.",
										"default": ""
									},
									"externalConsole": {
										"type": "boolean",
										"description": "If true, a console is launched for the debuggee. If false, no console is launched. Note this option is ignored in some cases for technical reasons.",
										"default": false
									},
									"sourceFileMap": {
										"type": "object",
										"description": "Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'",
										"default": {
											"<source-path>": "<target-path>"
										}
									},
									"logging": {
										"type": "object",
										"description": "Optional flags to determine what types of messages should be logged to the Debug Console.",
										"default": {},
										"properties": {
											"exceptions": {
												"type": "boolean",
												"description": "Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"moduleLoad": {
												"type": "boolean",
												"description": "Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"programOutput": {
												"type": "boolean",
												"description": "Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"engineLogging": {
												"type": "boolean",
												"description": "Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.",
												"default": false
											},
											"trace": {
												"type": "boolean",
												"description": "Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.",
												"default": false
											},
											"traceResponse": {
												"type": "boolean",
												"description": "Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.",
												"default": false
											}
										}
									},
									"pipeTransport": {
										"description": "When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).",
										"type": "object",
										"default": {
											"pipeCwd": "${workspaceRoot}",
											"pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
											"pipeArgs": [],
											"debuggerPath": "enter the path for the debugger on the target machine, for example /usr/bin/gdb"
										},
										"properties": {
											"pipeCwd": {
												"type": "string",
												"description": "The fully qualified path to the working directory for the pipe program.",
												"default": "/usr/bin"
											},
											"pipeProgram": {
												"type": "string",
												"description": "The fully qualified pipe command to execute.",
												"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
											},
											"pipeArgs": {
												"type": "array",
												"description": "Command line arguments passed to the pipe program to configure the connection.",
												"items": {
													"type": "string"
												},
												"default": []
											},
											"debuggerPath": {
												"type": "string",
												"description": "The full path to the debugger on the target machine, for example /usr/bin/gdb.",
												"default": "The full path to the debugger on the target machine, for example /usr/bin/gdb."
											},
											"pipeEnv": {
												"type": "object",
												"additionalProperties": {
													"type": "string"
												},
												"description": "Environment variables passed to the pipe program.",
												"default": {}
											}
										}
									},
									"name": {
										"type": "string",
										"description": "Name of configuration; appears in the launch configuration drop down menu.",
										"default": "Launch"
									},
									"request": {
										"enum": [
											"launch"
										],
										"description": "Request type of configuration. Can be \"launch\" or \"attach\"."
									},
									"debugServer": {
										"type": "number",
										"description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
										"default": 4711
									},
									"preLaunchTask": {
										"type": [
											"string",
											"null"
										],
										"default": null,
										"description": "Task to run before debug session starts."
									},
									"internalConsoleOptions": {
										"enum": [
											"neverOpen",
											"openOnSessionStart",
											"openOnFirstSessionStart"
										],
										"default": "openOnFirstSessionStart",
										"description": "Controls behavior of the internal debug console.",
										"scope": 1,
										"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
										"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
									}
								},
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"osx": {
								"type": "object",
								"description": "OS X specific launch configuration attributes.",
								"properties": {
									"program": {
										"type": "string",
										"description": "Full path to program executable.",
										"default": "${workspaceRoot}/a.out"
									},
									"args": {
										"type": "array",
										"description": "Command line arguments passed to the program.",
										"items": {
											"type": "string"
										},
										"default": []
									},
									"type": {
										"enum": [
											"cppdbg"
										],
										"description": "Type of configuration.",
										"pattern": "^(?!node2)",
										"errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
										"patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
									},
									"targetArchitecture": {
										"type": "string",
										"description": "The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.",
										"default": "x64"
									},
									"cwd": {
										"type": "string",
										"description": "The working directory of the target",
										"default": "."
									},
									"setupCommands": {
										"type": "array",
										"description": "One or more GDB/LLDB commands to execute in order to setup the underlying debugger. Example: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].",
										"items": {
											"type": "object",
											"properties": {
												"text": {
													"type": "string",
													"description": "The debugger command to execute.",
													"default": ""
												},
												"description": {
													"type": "string",
													"description": "Optional description for the command.",
													"default": ""
												},
												"ignoreFailures": {
													"type": "boolean",
													"description": "If true, failures from the command should be ignored. Default value is false.",
													"default": false
												}
											}
										},
										"default": []
									},
									"customLaunchSetupCommands": {
										"type": "array",
										"description": "If provided, this replaces the default commands used to launch a target with some other commands. For example, this can be \"-target-attach\" in order to attach to a target process. An empty command list replaces the launch commands with nothing, which can be useful if the debugger is being provided launch options as command line options. Example: \"customLaunchSetupCommands\": [ { \"text\": \"target-run\", \"description\": \"run target\", \"ignoreFailures\": false }].",
										"items": {
											"type": "object",
											"properties": {
												"text": {
													"type": "string",
													"description": "The debugger command to execute.",
													"default": ""
												},
												"description": {
													"type": "string",
													"description": "Optional description for the command.",
													"default": ""
												},
												"ignoreFailures": {
													"type": "boolean",
													"description": "If true, failures from the command should be ignored. Default value is false.",
													"default": false
												}
											}
										},
										"default": []
									},
									"launchCompleteCommand": {
										"enum": [
											"exec-run",
											"exec-continue",
											"None"
										],
										"description": "The command to execute after the debugger is fully setup in order to cause the target process to run. Allowed values are \"exec-run\", \"exec-continue\", \"None\". The default value is \"exec-run\".",
										"default": "exec-run"
									},
									"visualizerFile": {
										"type": "string",
										"description": ".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.",
										"default": ""
									},
									"showDisplayString": {
										"type": "boolean",
										"description": "When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.",
										"default": true
									},
									"environment": {
										"type": "array",
										"description": "Environment variables to add to the environment for the program. Example: [ { \"name\": \"squid\", \"value\": \"clam\" } ].",
										"items": {
											"type": "object",
											"properties": {
												"name": "string",
												"value": "string"
											}
										},
										"default": []
									},
									"additionalSOLibSearchPath": {
										"type": "string",
										"description": "Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".",
										"default": ""
									},
									"MIMode": {
										"type": "string",
										"description": "Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".",
										"default": "gdb"
									},
									"miDebuggerPath": {
										"type": "string",
										"description": "The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.",
										"default": "/usr/bin/gdb"
									},
									"miDebuggerServerAddress": {
										"type": "string",
										"description": "Network address of the MI Debugger Server to connect to (example: localhost:1234).",
										"default": "serveraddress:port"
									},
									"stopAtEntry": {
										"type": "boolean",
										"description": "Optional parameter. If true, the debugger should stop at the entrypoint of the target. If processId is passed, has no effect.",
										"default": false
									},
									"debugServerPath": {
										"type": "string",
										"description": "Optional full path to debug server to launch. Defaults to null.",
										"default": ""
									},
									"debugServerArgs": {
										"type": "string",
										"description": "Optional debug server args. Defaults to null.",
										"default": ""
									},
									"serverStarted": {
										"type": "string",
										"description": "Optional server-started pattern to look for in the debug server output. Defaults to null.",
										"default": ""
									},
									"filterStdout": {
										"type": "boolean",
										"description": "Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.",
										"default": true
									},
									"filterStderr": {
										"type": "boolean",
										"description": "Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.",
										"default": false
									},
									"serverLaunchTimeout": {
										"type": "integer",
										"description": "Optional time, in milliseconds, for the debugger to wait for the debugServer to start up. Default is 10000.",
										"default": "10000"
									},
									"coreDumpPath": {
										"type": "string",
										"description": "Optional full path to a core dump file for the specified program. Defaults to null.",
										"default": ""
									},
									"externalConsole": {
										"type": "boolean",
										"description": "If true, a console is launched for the debuggee. If false, no console is launched. Note this option is ignored in some cases for technical reasons.",
										"default": false
									},
									"sourceFileMap": {
										"type": "object",
										"description": "Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'",
										"default": {
											"<source-path>": "<target-path>"
										}
									},
									"logging": {
										"type": "object",
										"description": "Optional flags to determine what types of messages should be logged to the Debug Console.",
										"default": {},
										"properties": {
											"exceptions": {
												"type": "boolean",
												"description": "Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"moduleLoad": {
												"type": "boolean",
												"description": "Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"programOutput": {
												"type": "boolean",
												"description": "Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"engineLogging": {
												"type": "boolean",
												"description": "Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.",
												"default": false
											},
											"trace": {
												"type": "boolean",
												"description": "Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.",
												"default": false
											},
											"traceResponse": {
												"type": "boolean",
												"description": "Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.",
												"default": false
											}
										}
									},
									"pipeTransport": {
										"description": "When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).",
										"type": "object",
										"default": {
											"pipeCwd": "${workspaceRoot}",
											"pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
											"pipeArgs": [],
											"debuggerPath": "enter the path for the debugger on the target machine, for example /usr/bin/gdb"
										},
										"properties": {
											"pipeCwd": {
												"type": "string",
												"description": "The fully qualified path to the working directory for the pipe program.",
												"default": "/usr/bin"
											},
											"pipeProgram": {
												"type": "string",
												"description": "The fully qualified pipe command to execute.",
												"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
											},
											"pipeArgs": {
												"type": "array",
												"description": "Command line arguments passed to the pipe program to configure the connection.",
												"items": {
													"type": "string"
												},
												"default": []
											},
											"debuggerPath": {
												"type": "string",
												"description": "The full path to the debugger on the target machine, for example /usr/bin/gdb.",
												"default": "The full path to the debugger on the target machine, for example /usr/bin/gdb."
											},
											"pipeEnv": {
												"type": "object",
												"additionalProperties": {
													"type": "string"
												},
												"description": "Environment variables passed to the pipe program.",
												"default": {}
											}
										}
									},
									"name": {
										"type": "string",
										"description": "Name of configuration; appears in the launch configuration drop down menu.",
										"default": "Launch"
									},
									"request": {
										"enum": [
											"launch"
										],
										"description": "Request type of configuration. Can be \"launch\" or \"attach\"."
									},
									"debugServer": {
										"type": "number",
										"description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
										"default": 4711
									},
									"preLaunchTask": {
										"type": [
											"string",
											"null"
										],
										"default": null,
										"description": "Task to run before debug session starts."
									},
									"internalConsoleOptions": {
										"enum": [
											"neverOpen",
											"openOnSessionStart",
											"openOnFirstSessionStart"
										],
										"default": "openOnFirstSessionStart",
										"description": "Controls behavior of the internal debug console.",
										"scope": 1,
										"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
										"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
									}
								},
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"linux": {
								"type": "object",
								"description": "Linux specific launch configuration attributes.",
								"properties": {
									"program": {
										"type": "string",
										"description": "Full path to program executable.",
										"default": "${workspaceRoot}/a.out"
									},
									"args": {
										"type": "array",
										"description": "Command line arguments passed to the program.",
										"items": {
											"type": "string"
										},
										"default": []
									},
									"type": {
										"enum": [
											"cppdbg"
										],
										"description": "Type of configuration.",
										"pattern": "^(?!node2)",
										"errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
										"patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
									},
									"targetArchitecture": {
										"type": "string",
										"description": "The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.",
										"default": "x64"
									},
									"cwd": {
										"type": "string",
										"description": "The working directory of the target",
										"default": "."
									},
									"setupCommands": {
										"type": "array",
										"description": "One or more GDB/LLDB commands to execute in order to setup the underlying debugger. Example: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].",
										"items": {
											"type": "object",
											"properties": {
												"text": {
													"type": "string",
													"description": "The debugger command to execute.",
													"default": ""
												},
												"description": {
													"type": "string",
													"description": "Optional description for the command.",
													"default": ""
												},
												"ignoreFailures": {
													"type": "boolean",
													"description": "If true, failures from the command should be ignored. Default value is false.",
													"default": false
												}
											}
										},
										"default": []
									},
									"customLaunchSetupCommands": {
										"type": "array",
										"description": "If provided, this replaces the default commands used to launch a target with some other commands. For example, this can be \"-target-attach\" in order to attach to a target process. An empty command list replaces the launch commands with nothing, which can be useful if the debugger is being provided launch options as command line options. Example: \"customLaunchSetupCommands\": [ { \"text\": \"target-run\", \"description\": \"run target\", \"ignoreFailures\": false }].",
										"items": {
											"type": "object",
											"properties": {
												"text": {
													"type": "string",
													"description": "The debugger command to execute.",
													"default": ""
												},
												"description": {
													"type": "string",
													"description": "Optional description for the command.",
													"default": ""
												},
												"ignoreFailures": {
													"type": "boolean",
													"description": "If true, failures from the command should be ignored. Default value is false.",
													"default": false
												}
											}
										},
										"default": []
									},
									"launchCompleteCommand": {
										"enum": [
											"exec-run",
											"exec-continue",
											"None"
										],
										"description": "The command to execute after the debugger is fully setup in order to cause the target process to run. Allowed values are \"exec-run\", \"exec-continue\", \"None\". The default value is \"exec-run\".",
										"default": "exec-run"
									},
									"visualizerFile": {
										"type": "string",
										"description": ".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.",
										"default": ""
									},
									"showDisplayString": {
										"type": "boolean",
										"description": "When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.",
										"default": true
									},
									"environment": {
										"type": "array",
										"description": "Environment variables to add to the environment for the program. Example: [ { \"name\": \"squid\", \"value\": \"clam\" } ].",
										"items": {
											"type": "object",
											"properties": {
												"name": "string",
												"value": "string"
											}
										},
										"default": []
									},
									"additionalSOLibSearchPath": {
										"type": "string",
										"description": "Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".",
										"default": ""
									},
									"MIMode": {
										"type": "string",
										"description": "Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".",
										"default": "gdb"
									},
									"miDebuggerPath": {
										"type": "string",
										"description": "The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.",
										"default": "/usr/bin/gdb"
									},
									"miDebuggerServerAddress": {
										"type": "string",
										"description": "Network address of the MI Debugger Server to connect to (example: localhost:1234).",
										"default": "serveraddress:port"
									},
									"stopAtEntry": {
										"type": "boolean",
										"description": "Optional parameter. If true, the debugger should stop at the entrypoint of the target. If processId is passed, has no effect.",
										"default": false
									},
									"debugServerPath": {
										"type": "string",
										"description": "Optional full path to debug server to launch. Defaults to null.",
										"default": ""
									},
									"debugServerArgs": {
										"type": "string",
										"description": "Optional debug server args. Defaults to null.",
										"default": ""
									},
									"serverStarted": {
										"type": "string",
										"description": "Optional server-started pattern to look for in the debug server output. Defaults to null.",
										"default": ""
									},
									"filterStdout": {
										"type": "boolean",
										"description": "Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.",
										"default": true
									},
									"filterStderr": {
										"type": "boolean",
										"description": "Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.",
										"default": false
									},
									"serverLaunchTimeout": {
										"type": "integer",
										"description": "Optional time, in milliseconds, for the debugger to wait for the debugServer to start up. Default is 10000.",
										"default": "10000"
									},
									"coreDumpPath": {
										"type": "string",
										"description": "Optional full path to a core dump file for the specified program. Defaults to null.",
										"default": ""
									},
									"externalConsole": {
										"type": "boolean",
										"description": "If true, a console is launched for the debuggee. If false, no console is launched. Note this option is ignored in some cases for technical reasons.",
										"default": false
									},
									"sourceFileMap": {
										"type": "object",
										"description": "Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'",
										"default": {
											"<source-path>": "<target-path>"
										}
									},
									"logging": {
										"type": "object",
										"description": "Optional flags to determine what types of messages should be logged to the Debug Console.",
										"default": {},
										"properties": {
											"exceptions": {
												"type": "boolean",
												"description": "Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"moduleLoad": {
												"type": "boolean",
												"description": "Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"programOutput": {
												"type": "boolean",
												"description": "Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"engineLogging": {
												"type": "boolean",
												"description": "Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.",
												"default": false
											},
											"trace": {
												"type": "boolean",
												"description": "Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.",
												"default": false
											},
											"traceResponse": {
												"type": "boolean",
												"description": "Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.",
												"default": false
											}
										}
									},
									"pipeTransport": {
										"description": "When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).",
										"type": "object",
										"default": {
											"pipeCwd": "${workspaceRoot}",
											"pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
											"pipeArgs": [],
											"debuggerPath": "enter the path for the debugger on the target machine, for example /usr/bin/gdb"
										},
										"properties": {
											"pipeCwd": {
												"type": "string",
												"description": "The fully qualified path to the working directory for the pipe program.",
												"default": "/usr/bin"
											},
											"pipeProgram": {
												"type": "string",
												"description": "The fully qualified pipe command to execute.",
												"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
											},
											"pipeArgs": {
												"type": "array",
												"description": "Command line arguments passed to the pipe program to configure the connection.",
												"items": {
													"type": "string"
												},
												"default": []
											},
											"debuggerPath": {
												"type": "string",
												"description": "The full path to the debugger on the target machine, for example /usr/bin/gdb.",
												"default": "The full path to the debugger on the target machine, for example /usr/bin/gdb."
											},
											"pipeEnv": {
												"type": "object",
												"additionalProperties": {
													"type": "string"
												},
												"description": "Environment variables passed to the pipe program.",
												"default": {}
											}
										}
									},
									"name": {
										"type": "string",
										"description": "Name of configuration; appears in the launch configuration drop down menu.",
										"default": "Launch"
									},
									"request": {
										"enum": [
											"launch"
										],
										"description": "Request type of configuration. Can be \"launch\" or \"attach\"."
									},
									"debugServer": {
										"type": "number",
										"description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
										"default": 4711
									},
									"preLaunchTask": {
										"type": [
											"string",
											"null"
										],
										"default": null,
										"description": "Task to run before debug session starts."
									},
									"internalConsoleOptions": {
										"enum": [
											"neverOpen",
											"openOnSessionStart",
											"openOnFirstSessionStart"
										],
										"default": "openOnFirstSessionStart",
										"description": "Controls behavior of the internal debug console.",
										"scope": 1,
										"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
										"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
									}
								},
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							}
						},
						"additionalProperties": false,
						"type": "object"
					},
					"attach": {
						"required": [
							"name",
							"type",
							"request",
							"program",
							"processId"
						],
						"properties": {
							"program": {
								"type": "string",
								"description": "Full path to program executable.",
								"default": "${workspaceRoot}/a.out",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"type": {
								"enum": [
									"cppdbg"
								],
								"description": "Type of configuration.",
								"pattern": "^(?!node2)",
								"errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
								"patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
							},
							"targetArchitecture": {
								"type": "string",
								"description": "The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.",
								"default": "x64",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"visualizerFile": {
								"type": "string",
								"description": ".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.",
								"default": "",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"showDisplayString": {
								"type": "boolean",
								"description": "When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.",
								"default": true,
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"additionalSOLibSearchPath": {
								"type": "string",
								"description": "Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".",
								"default": "",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"MIMode": {
								"type": "string",
								"description": "Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".",
								"default": "gdb",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"miDebuggerPath": {
								"type": "string",
								"description": "The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.",
								"default": "/usr/bin/gdb",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"miDebuggerServerAddress": {
								"type": "string",
								"description": "Network address of the MI Debugger Server to connect to (example: localhost:1234).",
								"default": "serveraddress:port",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"processId": {
								"anyOf": [
									{
										"type": "string",
										"description": "Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.",
										"default": "${command:pickProcess}"
									},
									{
										"type": "integer",
										"description": "Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.",
										"default": 0
									}
								],
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"filterStdout": {
								"type": "boolean",
								"description": "Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.",
								"default": true,
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"filterStderr": {
								"type": "boolean",
								"description": "Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.",
								"default": false,
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"sourceFileMap": {
								"type": "object",
								"description": "Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'",
								"default": {
									"<source-path>": "<target-path>"
								},
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"logging": {
								"type": "object",
								"description": "Optional flags to determine what types of messages should be logged to the Debug Console.",
								"default": {},
								"properties": {
									"exceptions": {
										"type": "boolean",
										"description": "Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.",
										"default": true
									},
									"moduleLoad": {
										"type": "boolean",
										"description": "Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.",
										"default": true
									},
									"programOutput": {
										"type": "boolean",
										"description": "Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.",
										"default": true
									},
									"engineLogging": {
										"type": "boolean",
										"description": "Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.",
										"default": false
									},
									"trace": {
										"type": "boolean",
										"description": "Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.",
										"default": false
									},
									"traceResponse": {
										"type": "boolean",
										"description": "Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.",
										"default": false
									}
								},
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"pipeTransport": {
								"description": "When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).",
								"type": "object",
								"default": {
									"pipeCwd": "${workspaceRoot}",
									"pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
									"pipeArgs": [],
									"debuggerPath": "enter the path for the debugger on the target machine, for example /usr/bin/gdb"
								},
								"properties": {
									"pipeCwd": {
										"type": "string",
										"description": "The fully qualified path to the working directory for the pipe program.",
										"default": "/usr/bin"
									},
									"pipeProgram": {
										"type": "string",
										"description": "The fully qualified pipe command to execute.",
										"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
									},
									"pipeArgs": {
										"type": "array",
										"description": "Command line arguments passed to the pipe program to configure the connection.",
										"items": {
											"type": "string"
										},
										"default": []
									},
									"debuggerPath": {
										"type": "string",
										"description": "The full path to the debugger on the target machine, for example /usr/bin/gdb.",
										"default": "The full path to the debugger on the target machine, for example /usr/bin/gdb."
									},
									"pipeEnv": {
										"type": "object",
										"additionalProperties": {
											"type": "string"
										},
										"description": "Environment variables passed to the pipe program.",
										"default": {}
									}
								},
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"setupCommands": {
								"type": "array",
								"description": "One or more GDB/LLDB commands to execute in order to setup the underlying debugger. Example: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].",
								"items": {
									"type": "object",
									"properties": {
										"text": {
											"type": "string",
											"description": "The debugger command to execute.",
											"default": ""
										},
										"description": {
											"type": "string",
											"description": "Optional description for the command.",
											"default": ""
										},
										"ignoreFailures": {
											"type": "boolean",
											"description": "If true, failures from the command should be ignored. Default value is false.",
											"default": false
										}
									}
								},
								"default": [],
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"name": {
								"type": "string",
								"description": "Name of configuration; appears in the launch configuration drop down menu.",
								"default": "Launch",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"request": {
								"enum": [
									"attach"
								],
								"description": "Request type of configuration. Can be \"launch\" or \"attach\".",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"debugServer": {
								"type": "number",
								"description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
								"default": 4711,
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"preLaunchTask": {
								"type": [
									"string",
									"null"
								],
								"default": null,
								"description": "Task to run before debug session starts.",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"internalConsoleOptions": {
								"enum": [
									"neverOpen",
									"openOnSessionStart",
									"openOnFirstSessionStart"
								],
								"default": "openOnFirstSessionStart",
								"description": "Controls behavior of the internal debug console.",
								"scope": 1,
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"windows": {
								"type": "object",
								"description": "Windows specific launch configuration attributes.",
								"properties": {
									"program": {
										"type": "string",
										"description": "Full path to program executable.",
										"default": "${workspaceRoot}/a.out"
									},
									"type": {
										"enum": [
											"cppdbg"
										],
										"description": "Type of configuration.",
										"pattern": "^(?!node2)",
										"errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
										"patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
									},
									"targetArchitecture": {
										"type": "string",
										"description": "The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.",
										"default": "x64"
									},
									"visualizerFile": {
										"type": "string",
										"description": ".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.",
										"default": ""
									},
									"showDisplayString": {
										"type": "boolean",
										"description": "When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.",
										"default": true
									},
									"additionalSOLibSearchPath": {
										"type": "string",
										"description": "Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".",
										"default": ""
									},
									"MIMode": {
										"type": "string",
										"description": "Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".",
										"default": "gdb"
									},
									"miDebuggerPath": {
										"type": "string",
										"description": "The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.",
										"default": "/usr/bin/gdb"
									},
									"miDebuggerServerAddress": {
										"type": "string",
										"description": "Network address of the MI Debugger Server to connect to (example: localhost:1234).",
										"default": "serveraddress:port"
									},
									"processId": {
										"anyOf": [
											{
												"type": "string",
												"description": "Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.",
												"default": "${command:pickProcess}"
											},
											{
												"type": "integer",
												"description": "Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.",
												"default": 0
											}
										]
									},
									"filterStdout": {
										"type": "boolean",
										"description": "Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.",
										"default": true
									},
									"filterStderr": {
										"type": "boolean",
										"description": "Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.",
										"default": false
									},
									"sourceFileMap": {
										"type": "object",
										"description": "Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'",
										"default": {
											"<source-path>": "<target-path>"
										}
									},
									"logging": {
										"type": "object",
										"description": "Optional flags to determine what types of messages should be logged to the Debug Console.",
										"default": {},
										"properties": {
											"exceptions": {
												"type": "boolean",
												"description": "Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"moduleLoad": {
												"type": "boolean",
												"description": "Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"programOutput": {
												"type": "boolean",
												"description": "Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"engineLogging": {
												"type": "boolean",
												"description": "Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.",
												"default": false
											},
											"trace": {
												"type": "boolean",
												"description": "Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.",
												"default": false
											},
											"traceResponse": {
												"type": "boolean",
												"description": "Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.",
												"default": false
											}
										}
									},
									"pipeTransport": {
										"description": "When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).",
										"type": "object",
										"default": {
											"pipeCwd": "${workspaceRoot}",
											"pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
											"pipeArgs": [],
											"debuggerPath": "enter the path for the debugger on the target machine, for example /usr/bin/gdb"
										},
										"properties": {
											"pipeCwd": {
												"type": "string",
												"description": "The fully qualified path to the working directory for the pipe program.",
												"default": "/usr/bin"
											},
											"pipeProgram": {
												"type": "string",
												"description": "The fully qualified pipe command to execute.",
												"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
											},
											"pipeArgs": {
												"type": "array",
												"description": "Command line arguments passed to the pipe program to configure the connection.",
												"items": {
													"type": "string"
												},
												"default": []
											},
											"debuggerPath": {
												"type": "string",
												"description": "The full path to the debugger on the target machine, for example /usr/bin/gdb.",
												"default": "The full path to the debugger on the target machine, for example /usr/bin/gdb."
											},
											"pipeEnv": {
												"type": "object",
												"additionalProperties": {
													"type": "string"
												},
												"description": "Environment variables passed to the pipe program.",
												"default": {}
											}
										}
									},
									"setupCommands": {
										"type": "array",
										"description": "One or more GDB/LLDB commands to execute in order to setup the underlying debugger. Example: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].",
										"items": {
											"type": "object",
											"properties": {
												"text": {
													"type": "string",
													"description": "The debugger command to execute.",
													"default": ""
												},
												"description": {
													"type": "string",
													"description": "Optional description for the command.",
													"default": ""
												},
												"ignoreFailures": {
													"type": "boolean",
													"description": "If true, failures from the command should be ignored. Default value is false.",
													"default": false
												}
											}
										},
										"default": []
									},
									"name": {
										"type": "string",
										"description": "Name of configuration; appears in the launch configuration drop down menu.",
										"default": "Launch"
									},
									"request": {
										"enum": [
											"attach"
										],
										"description": "Request type of configuration. Can be \"launch\" or \"attach\"."
									},
									"debugServer": {
										"type": "number",
										"description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
										"default": 4711
									},
									"preLaunchTask": {
										"type": [
											"string",
											"null"
										],
										"default": null,
										"description": "Task to run before debug session starts."
									},
									"internalConsoleOptions": {
										"enum": [
											"neverOpen",
											"openOnSessionStart",
											"openOnFirstSessionStart"
										],
										"default": "openOnFirstSessionStart",
										"description": "Controls behavior of the internal debug console.",
										"scope": 1,
										"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
										"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
									}
								},
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"osx": {
								"type": "object",
								"description": "OS X specific launch configuration attributes.",
								"properties": {
									"program": {
										"type": "string",
										"description": "Full path to program executable.",
										"default": "${workspaceRoot}/a.out"
									},
									"type": {
										"enum": [
											"cppdbg"
										],
										"description": "Type of configuration.",
										"pattern": "^(?!node2)",
										"errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
										"patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
									},
									"targetArchitecture": {
										"type": "string",
										"description": "The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.",
										"default": "x64"
									},
									"visualizerFile": {
										"type": "string",
										"description": ".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.",
										"default": ""
									},
									"showDisplayString": {
										"type": "boolean",
										"description": "When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.",
										"default": true
									},
									"additionalSOLibSearchPath": {
										"type": "string",
										"description": "Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".",
										"default": ""
									},
									"MIMode": {
										"type": "string",
										"description": "Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".",
										"default": "gdb"
									},
									"miDebuggerPath": {
										"type": "string",
										"description": "The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.",
										"default": "/usr/bin/gdb"
									},
									"miDebuggerServerAddress": {
										"type": "string",
										"description": "Network address of the MI Debugger Server to connect to (example: localhost:1234).",
										"default": "serveraddress:port"
									},
									"processId": {
										"anyOf": [
											{
												"type": "string",
												"description": "Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.",
												"default": "${command:pickProcess}"
											},
											{
												"type": "integer",
												"description": "Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.",
												"default": 0
											}
										]
									},
									"filterStdout": {
										"type": "boolean",
										"description": "Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.",
										"default": true
									},
									"filterStderr": {
										"type": "boolean",
										"description": "Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.",
										"default": false
									},
									"sourceFileMap": {
										"type": "object",
										"description": "Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'",
										"default": {
											"<source-path>": "<target-path>"
										}
									},
									"logging": {
										"type": "object",
										"description": "Optional flags to determine what types of messages should be logged to the Debug Console.",
										"default": {},
										"properties": {
											"exceptions": {
												"type": "boolean",
												"description": "Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"moduleLoad": {
												"type": "boolean",
												"description": "Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"programOutput": {
												"type": "boolean",
												"description": "Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"engineLogging": {
												"type": "boolean",
												"description": "Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.",
												"default": false
											},
											"trace": {
												"type": "boolean",
												"description": "Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.",
												"default": false
											},
											"traceResponse": {
												"type": "boolean",
												"description": "Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.",
												"default": false
											}
										}
									},
									"pipeTransport": {
										"description": "When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).",
										"type": "object",
										"default": {
											"pipeCwd": "${workspaceRoot}",
											"pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
											"pipeArgs": [],
											"debuggerPath": "enter the path for the debugger on the target machine, for example /usr/bin/gdb"
										},
										"properties": {
											"pipeCwd": {
												"type": "string",
												"description": "The fully qualified path to the working directory for the pipe program.",
												"default": "/usr/bin"
											},
											"pipeProgram": {
												"type": "string",
												"description": "The fully qualified pipe command to execute.",
												"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
											},
											"pipeArgs": {
												"type": "array",
												"description": "Command line arguments passed to the pipe program to configure the connection.",
												"items": {
													"type": "string"
												},
												"default": []
											},
											"debuggerPath": {
												"type": "string",
												"description": "The full path to the debugger on the target machine, for example /usr/bin/gdb.",
												"default": "The full path to the debugger on the target machine, for example /usr/bin/gdb."
											},
											"pipeEnv": {
												"type": "object",
												"additionalProperties": {
													"type": "string"
												},
												"description": "Environment variables passed to the pipe program.",
												"default": {}
											}
										}
									},
									"setupCommands": {
										"type": "array",
										"description": "One or more GDB/LLDB commands to execute in order to setup the underlying debugger. Example: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].",
										"items": {
											"type": "object",
											"properties": {
												"text": {
													"type": "string",
													"description": "The debugger command to execute.",
													"default": ""
												},
												"description": {
													"type": "string",
													"description": "Optional description for the command.",
													"default": ""
												},
												"ignoreFailures": {
													"type": "boolean",
													"description": "If true, failures from the command should be ignored. Default value is false.",
													"default": false
												}
											}
										},
										"default": []
									},
									"name": {
										"type": "string",
										"description": "Name of configuration; appears in the launch configuration drop down menu.",
										"default": "Launch"
									},
									"request": {
										"enum": [
											"attach"
										],
										"description": "Request type of configuration. Can be \"launch\" or \"attach\"."
									},
									"debugServer": {
										"type": "number",
										"description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
										"default": 4711
									},
									"preLaunchTask": {
										"type": [
											"string",
											"null"
										],
										"default": null,
										"description": "Task to run before debug session starts."
									},
									"internalConsoleOptions": {
										"enum": [
											"neverOpen",
											"openOnSessionStart",
											"openOnFirstSessionStart"
										],
										"default": "openOnFirstSessionStart",
										"description": "Controls behavior of the internal debug console.",
										"scope": 1,
										"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
										"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
									}
								},
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"linux": {
								"type": "object",
								"description": "Linux specific launch configuration attributes.",
								"properties": {
									"program": {
										"type": "string",
										"description": "Full path to program executable.",
										"default": "${workspaceRoot}/a.out"
									},
									"type": {
										"enum": [
											"cppdbg"
										],
										"description": "Type of configuration.",
										"pattern": "^(?!node2)",
										"errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
										"patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
									},
									"targetArchitecture": {
										"type": "string",
										"description": "The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.",
										"default": "x64"
									},
									"visualizerFile": {
										"type": "string",
										"description": ".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.",
										"default": ""
									},
									"showDisplayString": {
										"type": "boolean",
										"description": "When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.",
										"default": true
									},
									"additionalSOLibSearchPath": {
										"type": "string",
										"description": "Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".",
										"default": ""
									},
									"MIMode": {
										"type": "string",
										"description": "Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".",
										"default": "gdb"
									},
									"miDebuggerPath": {
										"type": "string",
										"description": "The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.",
										"default": "/usr/bin/gdb"
									},
									"miDebuggerServerAddress": {
										"type": "string",
										"description": "Network address of the MI Debugger Server to connect to (example: localhost:1234).",
										"default": "serveraddress:port"
									},
									"processId": {
										"anyOf": [
											{
												"type": "string",
												"description": "Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.",
												"default": "${command:pickProcess}"
											},
											{
												"type": "integer",
												"description": "Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.",
												"default": 0
											}
										]
									},
									"filterStdout": {
										"type": "boolean",
										"description": "Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.",
										"default": true
									},
									"filterStderr": {
										"type": "boolean",
										"description": "Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.",
										"default": false
									},
									"sourceFileMap": {
										"type": "object",
										"description": "Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'",
										"default": {
											"<source-path>": "<target-path>"
										}
									},
									"logging": {
										"type": "object",
										"description": "Optional flags to determine what types of messages should be logged to the Debug Console.",
										"default": {},
										"properties": {
											"exceptions": {
												"type": "boolean",
												"description": "Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"moduleLoad": {
												"type": "boolean",
												"description": "Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"programOutput": {
												"type": "boolean",
												"description": "Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"engineLogging": {
												"type": "boolean",
												"description": "Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.",
												"default": false
											},
											"trace": {
												"type": "boolean",
												"description": "Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.",
												"default": false
											},
											"traceResponse": {
												"type": "boolean",
												"description": "Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.",
												"default": false
											}
										}
									},
									"pipeTransport": {
										"description": "When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).",
										"type": "object",
										"default": {
											"pipeCwd": "${workspaceRoot}",
											"pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
											"pipeArgs": [],
											"debuggerPath": "enter the path for the debugger on the target machine, for example /usr/bin/gdb"
										},
										"properties": {
											"pipeCwd": {
												"type": "string",
												"description": "The fully qualified path to the working directory for the pipe program.",
												"default": "/usr/bin"
											},
											"pipeProgram": {
												"type": "string",
												"description": "The fully qualified pipe command to execute.",
												"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
											},
											"pipeArgs": {
												"type": "array",
												"description": "Command line arguments passed to the pipe program to configure the connection.",
												"items": {
													"type": "string"
												},
												"default": []
											},
											"debuggerPath": {
												"type": "string",
												"description": "The full path to the debugger on the target machine, for example /usr/bin/gdb.",
												"default": "The full path to the debugger on the target machine, for example /usr/bin/gdb."
											},
											"pipeEnv": {
												"type": "object",
												"additionalProperties": {
													"type": "string"
												},
												"description": "Environment variables passed to the pipe program.",
												"default": {}
											}
										}
									},
									"setupCommands": {
										"type": "array",
										"description": "One or more GDB/LLDB commands to execute in order to setup the underlying debugger. Example: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].",
										"items": {
											"type": "object",
											"properties": {
												"text": {
													"type": "string",
													"description": "The debugger command to execute.",
													"default": ""
												},
												"description": {
													"type": "string",
													"description": "Optional description for the command.",
													"default": ""
												},
												"ignoreFailures": {
													"type": "boolean",
													"description": "If true, failures from the command should be ignored. Default value is false.",
													"default": false
												}
											}
										},
										"default": []
									},
									"name": {
										"type": "string",
										"description": "Name of configuration; appears in the launch configuration drop down menu.",
										"default": "Launch"
									},
									"request": {
										"enum": [
											"attach"
										],
										"description": "Request type of configuration. Can be \"launch\" or \"attach\"."
									},
									"debugServer": {
										"type": "number",
										"description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
										"default": 4711
									},
									"preLaunchTask": {
										"type": [
											"string",
											"null"
										],
										"default": null,
										"description": "Task to run before debug session starts."
									},
									"internalConsoleOptions": {
										"enum": [
											"neverOpen",
											"openOnSessionStart",
											"openOnFirstSessionStart"
										],
										"default": "openOnFirstSessionStart",
										"description": "Controls behavior of the internal debug console.",
										"scope": 1,
										"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
										"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
									}
								},
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							}
						},
						"additionalProperties": false,
						"type": "object"
					}
				}
			},
			{
				"type": "cppvsdbg",
				"label": "C++ (Windows)",
				"enableBreakpointsFor": {
					"languageIds": [
						"c",
						"cpp"
					]
				},
				"adapterExecutableCommand": "extension.cppvsdbgAdapterExecutableCommand",
				"aiKey": "AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217",
				"variables": {
					"pickProcess": "extension.pickNativeProcess"
				},
				"configurationAttributes": {
					"launch": {
						"required": [
							"name",
							"type",
							"request",
							"program",
							"cwd"
						],
						"properties": {
							"program": {
								"type": "string",
								"description": "Full path to program executable.",
								"default": "${workspaceRoot}/program.exe",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"args": {
								"type": "array",
								"description": "Command line arguments passed to the program.",
								"items": {
									"type": "string"
								},
								"default": [],
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"type": {
								"enum": [
									"cppvsdbg"
								],
								"description": "Type of configuration.",
								"pattern": "^(?!node2)",
								"errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
								"patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
							},
							"cwd": {
								"type": "string",
								"description": "The working directory of the target.",
								"default": "${workspaceRoot}",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"environment": {
								"type": "array",
								"description": "Environment variables to add to the environment for the program. Example: [ { \"name\": \"squid\", \"value\": \"clam\" } ].",
								"items": {
									"type": "object",
									"properties": {
										"name": "string",
										"value": "string"
									}
								},
								"default": [],
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"symbolSearchPath": {
								"type": "string",
								"description": "Semicolon separated list of directories to use to search for symbol (that is, pdb) files. Example: \"c:\\dir1;c:\\dir2\".",
								"default": "",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"stopAtEntry": {
								"type": "boolean",
								"description": "Optional parameter. If true, the debugger should stop at the entrypoint of the target. If processId is passed, has no effect.",
								"default": false,
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"dumpPath": {
								"type": "string",
								"description": "Optional full path to a dump file for the specified program. Example: \"c:\\temp\\app.dmp\". Defaults to null.",
								"default": "",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"visualizerFile": {
								"type": "string",
								"description": ".natvis file to be used when debugging this process.",
								"default": "",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"externalConsole": {
								"type": "boolean",
								"description": "If true, a console is launched for the debuggee. If false, no console is launched.",
								"default": false,
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"sourceFileMap": {
								"type": "object",
								"description": "Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'",
								"default": {
									"<source-path>": "<target-path>"
								},
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"logging": {
								"type": "object",
								"description": "Optional flags to determine what types of messages should be logged to the Debug Console.",
								"default": {},
								"properties": {
									"exceptions": {
										"type": "boolean",
										"description": "Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.",
										"default": true
									},
									"moduleLoad": {
										"type": "boolean",
										"description": "Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.",
										"default": true
									},
									"programOutput": {
										"type": "boolean",
										"description": "Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.",
										"default": true
									},
									"engineLogging": {
										"type": "boolean",
										"description": "Optional flag to determine whether diagnostic debug engine messages should be logged to the Debug Console. Defaults to false.",
										"default": false
									}
								},
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"name": {
								"type": "string",
								"description": "Name of configuration; appears in the launch configuration drop down menu.",
								"default": "Launch",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"request": {
								"enum": [
									"launch"
								],
								"description": "Request type of configuration. Can be \"launch\" or \"attach\".",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"debugServer": {
								"type": "number",
								"description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
								"default": 4711,
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"preLaunchTask": {
								"type": [
									"string",
									"null"
								],
								"default": null,
								"description": "Task to run before debug session starts.",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"internalConsoleOptions": {
								"enum": [
									"neverOpen",
									"openOnSessionStart",
									"openOnFirstSessionStart"
								],
								"default": "openOnFirstSessionStart",
								"description": "Controls behavior of the internal debug console.",
								"scope": 1,
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"windows": {
								"type": "object",
								"description": "Windows specific launch configuration attributes.",
								"properties": {
									"program": {
										"type": "string",
										"description": "Full path to program executable.",
										"default": "${workspaceRoot}/program.exe"
									},
									"args": {
										"type": "array",
										"description": "Command line arguments passed to the program.",
										"items": {
											"type": "string"
										},
										"default": []
									},
									"type": {
										"enum": [
											"cppvsdbg"
										],
										"description": "Type of configuration.",
										"pattern": "^(?!node2)",
										"errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
										"patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
									},
									"cwd": {
										"type": "string",
										"description": "The working directory of the target.",
										"default": "${workspaceRoot}"
									},
									"environment": {
										"type": "array",
										"description": "Environment variables to add to the environment for the program. Example: [ { \"name\": \"squid\", \"value\": \"clam\" } ].",
										"items": {
											"type": "object",
											"properties": {
												"name": "string",
												"value": "string"
											}
										},
										"default": []
									},
									"symbolSearchPath": {
										"type": "string",
										"description": "Semicolon separated list of directories to use to search for symbol (that is, pdb) files. Example: \"c:\\dir1;c:\\dir2\".",
										"default": ""
									},
									"stopAtEntry": {
										"type": "boolean",
										"description": "Optional parameter. If true, the debugger should stop at the entrypoint of the target. If processId is passed, has no effect.",
										"default": false
									},
									"dumpPath": {
										"type": "string",
										"description": "Optional full path to a dump file for the specified program. Example: \"c:\\temp\\app.dmp\". Defaults to null.",
										"default": ""
									},
									"visualizerFile": {
										"type": "string",
										"description": ".natvis file to be used when debugging this process.",
										"default": ""
									},
									"externalConsole": {
										"type": "boolean",
										"description": "If true, a console is launched for the debuggee. If false, no console is launched.",
										"default": false
									},
									"sourceFileMap": {
										"type": "object",
										"description": "Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'",
										"default": {
											"<source-path>": "<target-path>"
										}
									},
									"logging": {
										"type": "object",
										"description": "Optional flags to determine what types of messages should be logged to the Debug Console.",
										"default": {},
										"properties": {
											"exceptions": {
												"type": "boolean",
												"description": "Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"moduleLoad": {
												"type": "boolean",
												"description": "Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"programOutput": {
												"type": "boolean",
												"description": "Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"engineLogging": {
												"type": "boolean",
												"description": "Optional flag to determine whether diagnostic debug engine messages should be logged to the Debug Console. Defaults to false.",
												"default": false
											}
										}
									},
									"name": {
										"type": "string",
										"description": "Name of configuration; appears in the launch configuration drop down menu.",
										"default": "Launch"
									},
									"request": {
										"enum": [
											"launch"
										],
										"description": "Request type of configuration. Can be \"launch\" or \"attach\"."
									},
									"debugServer": {
										"type": "number",
										"description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
										"default": 4711
									},
									"preLaunchTask": {
										"type": [
											"string",
											"null"
										],
										"default": null,
										"description": "Task to run before debug session starts."
									},
									"internalConsoleOptions": {
										"enum": [
											"neverOpen",
											"openOnSessionStart",
											"openOnFirstSessionStart"
										],
										"default": "openOnFirstSessionStart",
										"description": "Controls behavior of the internal debug console.",
										"scope": 1,
										"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
										"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
									}
								},
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"osx": {
								"type": "object",
								"description": "OS X specific launch configuration attributes.",
								"properties": {
									"program": {
										"type": "string",
										"description": "Full path to program executable.",
										"default": "${workspaceRoot}/program.exe"
									},
									"args": {
										"type": "array",
										"description": "Command line arguments passed to the program.",
										"items": {
											"type": "string"
										},
										"default": []
									},
									"type": {
										"enum": [
											"cppvsdbg"
										],
										"description": "Type of configuration.",
										"pattern": "^(?!node2)",
										"errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
										"patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
									},
									"cwd": {
										"type": "string",
										"description": "The working directory of the target.",
										"default": "${workspaceRoot}"
									},
									"environment": {
										"type": "array",
										"description": "Environment variables to add to the environment for the program. Example: [ { \"name\": \"squid\", \"value\": \"clam\" } ].",
										"items": {
											"type": "object",
											"properties": {
												"name": "string",
												"value": "string"
											}
										},
										"default": []
									},
									"symbolSearchPath": {
										"type": "string",
										"description": "Semicolon separated list of directories to use to search for symbol (that is, pdb) files. Example: \"c:\\dir1;c:\\dir2\".",
										"default": ""
									},
									"stopAtEntry": {
										"type": "boolean",
										"description": "Optional parameter. If true, the debugger should stop at the entrypoint of the target. If processId is passed, has no effect.",
										"default": false
									},
									"dumpPath": {
										"type": "string",
										"description": "Optional full path to a dump file for the specified program. Example: \"c:\\temp\\app.dmp\". Defaults to null.",
										"default": ""
									},
									"visualizerFile": {
										"type": "string",
										"description": ".natvis file to be used when debugging this process.",
										"default": ""
									},
									"externalConsole": {
										"type": "boolean",
										"description": "If true, a console is launched for the debuggee. If false, no console is launched.",
										"default": false
									},
									"sourceFileMap": {
										"type": "object",
										"description": "Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'",
										"default": {
											"<source-path>": "<target-path>"
										}
									},
									"logging": {
										"type": "object",
										"description": "Optional flags to determine what types of messages should be logged to the Debug Console.",
										"default": {},
										"properties": {
											"exceptions": {
												"type": "boolean",
												"description": "Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"moduleLoad": {
												"type": "boolean",
												"description": "Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"programOutput": {
												"type": "boolean",
												"description": "Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"engineLogging": {
												"type": "boolean",
												"description": "Optional flag to determine whether diagnostic debug engine messages should be logged to the Debug Console. Defaults to false.",
												"default": false
											}
										}
									},
									"name": {
										"type": "string",
										"description": "Name of configuration; appears in the launch configuration drop down menu.",
										"default": "Launch"
									},
									"request": {
										"enum": [
											"launch"
										],
										"description": "Request type of configuration. Can be \"launch\" or \"attach\"."
									},
									"debugServer": {
										"type": "number",
										"description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
										"default": 4711
									},
									"preLaunchTask": {
										"type": [
											"string",
											"null"
										],
										"default": null,
										"description": "Task to run before debug session starts."
									},
									"internalConsoleOptions": {
										"enum": [
											"neverOpen",
											"openOnSessionStart",
											"openOnFirstSessionStart"
										],
										"default": "openOnFirstSessionStart",
										"description": "Controls behavior of the internal debug console.",
										"scope": 1,
										"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
										"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
									}
								},
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"linux": {
								"type": "object",
								"description": "Linux specific launch configuration attributes.",
								"properties": {
									"program": {
										"type": "string",
										"description": "Full path to program executable.",
										"default": "${workspaceRoot}/program.exe"
									},
									"args": {
										"type": "array",
										"description": "Command line arguments passed to the program.",
										"items": {
											"type": "string"
										},
										"default": []
									},
									"type": {
										"enum": [
											"cppvsdbg"
										],
										"description": "Type of configuration.",
										"pattern": "^(?!node2)",
										"errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
										"patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
									},
									"cwd": {
										"type": "string",
										"description": "The working directory of the target.",
										"default": "${workspaceRoot}"
									},
									"environment": {
										"type": "array",
										"description": "Environment variables to add to the environment for the program. Example: [ { \"name\": \"squid\", \"value\": \"clam\" } ].",
										"items": {
											"type": "object",
											"properties": {
												"name": "string",
												"value": "string"
											}
										},
										"default": []
									},
									"symbolSearchPath": {
										"type": "string",
										"description": "Semicolon separated list of directories to use to search for symbol (that is, pdb) files. Example: \"c:\\dir1;c:\\dir2\".",
										"default": ""
									},
									"stopAtEntry": {
										"type": "boolean",
										"description": "Optional parameter. If true, the debugger should stop at the entrypoint of the target. If processId is passed, has no effect.",
										"default": false
									},
									"dumpPath": {
										"type": "string",
										"description": "Optional full path to a dump file for the specified program. Example: \"c:\\temp\\app.dmp\". Defaults to null.",
										"default": ""
									},
									"visualizerFile": {
										"type": "string",
										"description": ".natvis file to be used when debugging this process.",
										"default": ""
									},
									"externalConsole": {
										"type": "boolean",
										"description": "If true, a console is launched for the debuggee. If false, no console is launched.",
										"default": false
									},
									"sourceFileMap": {
										"type": "object",
										"description": "Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'",
										"default": {
											"<source-path>": "<target-path>"
										}
									},
									"logging": {
										"type": "object",
										"description": "Optional flags to determine what types of messages should be logged to the Debug Console.",
										"default": {},
										"properties": {
											"exceptions": {
												"type": "boolean",
												"description": "Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"moduleLoad": {
												"type": "boolean",
												"description": "Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"programOutput": {
												"type": "boolean",
												"description": "Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"engineLogging": {
												"type": "boolean",
												"description": "Optional flag to determine whether diagnostic debug engine messages should be logged to the Debug Console. Defaults to false.",
												"default": false
											}
										}
									},
									"name": {
										"type": "string",
										"description": "Name of configuration; appears in the launch configuration drop down menu.",
										"default": "Launch"
									},
									"request": {
										"enum": [
											"launch"
										],
										"description": "Request type of configuration. Can be \"launch\" or \"attach\"."
									},
									"debugServer": {
										"type": "number",
										"description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
										"default": 4711
									},
									"preLaunchTask": {
										"type": [
											"string",
											"null"
										],
										"default": null,
										"description": "Task to run before debug session starts."
									},
									"internalConsoleOptions": {
										"enum": [
											"neverOpen",
											"openOnSessionStart",
											"openOnFirstSessionStart"
										],
										"default": "openOnFirstSessionStart",
										"description": "Controls behavior of the internal debug console.",
										"scope": 1,
										"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
										"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
									}
								},
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							}
						},
						"additionalProperties": false,
						"type": "object"
					},
					"attach": {
						"required": [
							"name",
							"type",
							"request",
							"processId"
						],
						"properties": {
							"type": {
								"enum": [
									"cppvsdbg"
								],
								"description": "Type of configuration.",
								"pattern": "^(?!node2)",
								"errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
								"patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
							},
							"symbolSearchPath": {
								"type": "string",
								"description": "Semicolon separated list of directories to use to search for symbol (that is, pdb) files. Example: \"c:\\dir1;c:\\dir2\".",
								"default": "",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"processId": {
								"anyOf": [
									{
										"type": "string",
										"description": "Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.",
										"default": "${command:pickProcess}"
									},
									{
										"type": "integer",
										"description": "Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.",
										"default": 0
									}
								],
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"visualizerFile": {
								"type": "string",
								"description": ".natvis file to be used when debugging this process.",
								"default": "",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"sourceFileMap": {
								"type": "object",
								"description": "Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'",
								"default": {
									"<source-path>": "<target-path>"
								},
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"logging": {
								"type": "object",
								"description": "Optional flags to determine what types of messages should be logged to the Debug Console.",
								"default": {},
								"properties": {
									"exceptions": {
										"type": "boolean",
										"description": "Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.",
										"default": true
									},
									"moduleLoad": {
										"type": "boolean",
										"description": "Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.",
										"default": true
									},
									"programOutput": {
										"type": "boolean",
										"description": "Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.",
										"default": true
									},
									"trace": {
										"type": "boolean",
										"description": "Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.",
										"default": false
									}
								},
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"name": {
								"type": "string",
								"description": "Name of configuration; appears in the launch configuration drop down menu.",
								"default": "Launch",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"request": {
								"enum": [
									"attach"
								],
								"description": "Request type of configuration. Can be \"launch\" or \"attach\".",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"debugServer": {
								"type": "number",
								"description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
								"default": 4711,
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"preLaunchTask": {
								"type": [
									"string",
									"null"
								],
								"default": null,
								"description": "Task to run before debug session starts.",
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"internalConsoleOptions": {
								"enum": [
									"neverOpen",
									"openOnSessionStart",
									"openOnFirstSessionStart"
								],
								"default": "openOnFirstSessionStart",
								"description": "Controls behavior of the internal debug console.",
								"scope": 1,
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"windows": {
								"type": "object",
								"description": "Windows specific launch configuration attributes.",
								"properties": {
									"type": {
										"enum": [
											"cppvsdbg"
										],
										"description": "Type of configuration.",
										"pattern": "^(?!node2)",
										"errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
										"patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
									},
									"symbolSearchPath": {
										"type": "string",
										"description": "Semicolon separated list of directories to use to search for symbol (that is, pdb) files. Example: \"c:\\dir1;c:\\dir2\".",
										"default": ""
									},
									"processId": {
										"anyOf": [
											{
												"type": "string",
												"description": "Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.",
												"default": "${command:pickProcess}"
											},
											{
												"type": "integer",
												"description": "Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.",
												"default": 0
											}
										]
									},
									"visualizerFile": {
										"type": "string",
										"description": ".natvis file to be used when debugging this process.",
										"default": ""
									},
									"sourceFileMap": {
										"type": "object",
										"description": "Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'",
										"default": {
											"<source-path>": "<target-path>"
										}
									},
									"logging": {
										"type": "object",
										"description": "Optional flags to determine what types of messages should be logged to the Debug Console.",
										"default": {},
										"properties": {
											"exceptions": {
												"type": "boolean",
												"description": "Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"moduleLoad": {
												"type": "boolean",
												"description": "Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"programOutput": {
												"type": "boolean",
												"description": "Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"trace": {
												"type": "boolean",
												"description": "Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.",
												"default": false
											}
										}
									},
									"name": {
										"type": "string",
										"description": "Name of configuration; appears in the launch configuration drop down menu.",
										"default": "Launch"
									},
									"request": {
										"enum": [
											"attach"
										],
										"description": "Request type of configuration. Can be \"launch\" or \"attach\"."
									},
									"debugServer": {
										"type": "number",
										"description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
										"default": 4711
									},
									"preLaunchTask": {
										"type": [
											"string",
											"null"
										],
										"default": null,
										"description": "Task to run before debug session starts."
									},
									"internalConsoleOptions": {
										"enum": [
											"neverOpen",
											"openOnSessionStart",
											"openOnFirstSessionStart"
										],
										"default": "openOnFirstSessionStart",
										"description": "Controls behavior of the internal debug console.",
										"scope": 1,
										"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
										"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
									}
								},
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"osx": {
								"type": "object",
								"description": "OS X specific launch configuration attributes.",
								"properties": {
									"type": {
										"enum": [
											"cppvsdbg"
										],
										"description": "Type of configuration.",
										"pattern": "^(?!node2)",
										"errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
										"patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
									},
									"symbolSearchPath": {
										"type": "string",
										"description": "Semicolon separated list of directories to use to search for symbol (that is, pdb) files. Example: \"c:\\dir1;c:\\dir2\".",
										"default": ""
									},
									"processId": {
										"anyOf": [
											{
												"type": "string",
												"description": "Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.",
												"default": "${command:pickProcess}"
											},
											{
												"type": "integer",
												"description": "Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.",
												"default": 0
											}
										]
									},
									"visualizerFile": {
										"type": "string",
										"description": ".natvis file to be used when debugging this process.",
										"default": ""
									},
									"sourceFileMap": {
										"type": "object",
										"description": "Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'",
										"default": {
											"<source-path>": "<target-path>"
										}
									},
									"logging": {
										"type": "object",
										"description": "Optional flags to determine what types of messages should be logged to the Debug Console.",
										"default": {},
										"properties": {
											"exceptions": {
												"type": "boolean",
												"description": "Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"moduleLoad": {
												"type": "boolean",
												"description": "Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"programOutput": {
												"type": "boolean",
												"description": "Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"trace": {
												"type": "boolean",
												"description": "Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.",
												"default": false
											}
										}
									},
									"name": {
										"type": "string",
										"description": "Name of configuration; appears in the launch configuration drop down menu.",
										"default": "Launch"
									},
									"request": {
										"enum": [
											"attach"
										],
										"description": "Request type of configuration. Can be \"launch\" or \"attach\"."
									},
									"debugServer": {
										"type": "number",
										"description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
										"default": 4711
									},
									"preLaunchTask": {
										"type": [
											"string",
											"null"
										],
										"default": null,
										"description": "Task to run before debug session starts."
									},
									"internalConsoleOptions": {
										"enum": [
											"neverOpen",
											"openOnSessionStart",
											"openOnFirstSessionStart"
										],
										"default": "openOnFirstSessionStart",
										"description": "Controls behavior of the internal debug console.",
										"scope": 1,
										"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
										"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
									}
								},
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							},
							"linux": {
								"type": "object",
								"description": "Linux specific launch configuration attributes.",
								"properties": {
									"type": {
										"enum": [
											"cppvsdbg"
										],
										"description": "Type of configuration.",
										"pattern": "^(?!node2)",
										"errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
										"patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
									},
									"symbolSearchPath": {
										"type": "string",
										"description": "Semicolon separated list of directories to use to search for symbol (that is, pdb) files. Example: \"c:\\dir1;c:\\dir2\".",
										"default": ""
									},
									"processId": {
										"anyOf": [
											{
												"type": "string",
												"description": "Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.",
												"default": "${command:pickProcess}"
											},
											{
												"type": "integer",
												"description": "Optional process id to attach the debugger to. Use \"${command:pickProcesss}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.",
												"default": 0
											}
										]
									},
									"visualizerFile": {
										"type": "string",
										"description": ".natvis file to be used when debugging this process.",
										"default": ""
									},
									"sourceFileMap": {
										"type": "object",
										"description": "Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'",
										"default": {
											"<source-path>": "<target-path>"
										}
									},
									"logging": {
										"type": "object",
										"description": "Optional flags to determine what types of messages should be logged to the Debug Console.",
										"default": {},
										"properties": {
											"exceptions": {
												"type": "boolean",
												"description": "Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"moduleLoad": {
												"type": "boolean",
												"description": "Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"programOutput": {
												"type": "boolean",
												"description": "Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.",
												"default": true
											},
											"trace": {
												"type": "boolean",
												"description": "Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.",
												"default": false
											}
										}
									},
									"name": {
										"type": "string",
										"description": "Name of configuration; appears in the launch configuration drop down menu.",
										"default": "Launch"
									},
									"request": {
										"enum": [
											"attach"
										],
										"description": "Request type of configuration. Can be \"launch\" or \"attach\"."
									},
									"debugServer": {
										"type": "number",
										"description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
										"default": 4711
									},
									"preLaunchTask": {
										"type": [
											"string",
											"null"
										],
										"default": null,
										"description": "Task to run before debug session starts."
									},
									"internalConsoleOptions": {
										"enum": [
											"neverOpen",
											"openOnSessionStart",
											"openOnFirstSessionStart"
										],
										"default": "openOnFirstSessionStart",
										"description": "Controls behavior of the internal debug console.",
										"scope": 1,
										"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
										"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
									}
								},
								"pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
								"patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
							}
						},
						"additionalProperties": false,
						"type": "object"
					}
				}
			}
		],
		"jsonValidation": [
			{
				"fileMatch": "c_cpp_properties.json",
				"url": "./c_cpp_properties.schema.json"
			}
		],
		"menus": {
			"editor/context": [
				{
					"when": "editorLangId == c",
					"command": "C_Cpp.GoToDeclaration",
					"group": "navigation@2"
				},
				{
					"when": "editorLangId == cpp",
					"command": "C_Cpp.GoToDeclaration",
					"group": "navigation@2"
				},
				{
					"when": "editorLangId == c",
					"command": "C_Cpp.PeekDeclaration",
					"group": "navigation@3"
				},
				{
					"when": "editorLangId == cpp",
					"command": "C_Cpp.PeekDeclaration",
					"group": "navigation@3"
				},
				{
					"when": "editorLangId == c",
					"command": "C_Cpp.SwitchHeaderSource",
					"group": "other@1"
				},
				{
					"when": "editorLangId == cpp",
					"command": "C_Cpp.SwitchHeaderSource",
					"group": "other@1"
				},
				{
					"when": "editorLangId == c",
					"command": "C_Cpp.Navigate",
					"group": "other@2"
				},
				{
					"when": "editorLangId == cpp",
					"command": "C_Cpp.Navigate",
					"group": "other@2"
				},
				{
					"when": "editorLangId == c",
					"command": "workbench.action.gotoSymbol",
					"group": "other@3"
				},
				{
					"when": "editorLangId == cpp",
					"command": "workbench.action.gotoSymbol",
					"group": "other@3"
				},
				{
					"when": "editorLangId == c",
					"command": "workbench.action.showAllSymbols",
					"group": "other@4"
				},
				{
					"when": "editorLangId == cpp",
					"command": "workbench.action.showAllSymbols",
					"group": "other@4"
				}
			]
		},
		"configurationDefaults": {
			"[cpp]": {
				"editor.autoIndent": false
			},
			"[c]": {
				"editor.autoIndent": false
			}
		}
	},
	"scripts": {
		"compile": "npm run vscode:prepublish",
		"integrationTests": "gulp integrationTests",
		"postinstall": "node ./node_modules/vscode/bin/install",
		"pretest": "tsc -p ./",
		"test": "gulp allTests",
		"tslint": "gulp tslint",
		"unitTests": "gulp unitTests",
		"vscode:prepublish": "node ./src/Support/prepublish.js",
		"watch": "tsc -watch -p ./"
	},
	"devDependencies": {
		"@types/mocha": "^2.2.43",
		"@types/node": "^8.0.46",
		"gulp-env": "0.4.0",
		"gulp-mocha": "5.0.0",
		"gulp-tslint": "8.1.2",
		"gulp": "3.9.1",
		"mocha": "^4.0.1",
		"tslint-microsoft-contrib": "5.0.1",
		"tslint-no-unused-expression-chai": "0.0.3",
		"tslint": "5.8.0",
		"typescript": "^2.5.3",
		"vscode": "^1.1.6"
	},
	"dependencies": {
		"http-proxy-agent": "~2.0.0",
		"https-proxy-agent": "~2.1.0",
		"jsonc-parser": "^1.0.0",
		"minimatch": "~3.0.4",
		"mkdirp": "~0.5.1",
		"tmp": "~0.0.33",
		"vscode-debugadapter": "~1.24.0",
		"vscode-debugprotocol": "~1.24.0",
		"vscode-extension-telemetry": "~0.0.11",
		"vscode-languageclient": "~3.4.5",
		"yauzl": "~2.8.0"
	},
	"runtimeDependencies": [
		{
			"description": "C/C++ language components (Linux / x86_64)",
			"url": "https://go.microsoft.com/fwlink/?linkid=871264",
			"platforms": [
				"linux"
			],
			"architectures": [
				"x86_64"
			],
			"binaries": [
				"/home/genzix/.vscode/extensions/ms-vscode.cpptools-0.16.1/bin/Microsoft.VSCode.CPP.Extension.linux",
				"/home/genzix/.vscode/extensions/ms-vscode.cpptools-0.16.1/bin/Microsoft.VSCode.CPP.IntelliSense.Msvc.linux"
			],
			"tmpFile": {
				"name": "/tmp/package-15536Fd8N9JXrmjl8.tmp",
				"fd": 40
			}
		},
		{
			"description": "C/C++ language components (Linux / x86)",
			"url": "https://go.microsoft.com/fwlink/?linkid=871265",
			"platforms": [
				"linux"
			],
			"architectures": [
				"x86",
				"i686",
				"i386"
			],
			"binaries": [
				"/home/genzix/.vscode/extensions/ms-vscode.cpptools-0.16.1/bin/Microsoft.VSCode.CPP.Extension.linux",
				"/home/genzix/.vscode/extensions/ms-vscode.cpptools-0.16.1/bin/Microsoft.VSCode.CPP.IntelliSense.Msvc.linux"
			]
		},
		{
			"description": "C/C++ language components (OS X)",
			"url": "https://go.microsoft.com/fwlink/?linkid=871266",
			"platforms": [
				"darwin"
			],
			"binaries": [
				"/home/genzix/.vscode/extensions/ms-vscode.cpptools-0.16.1/bin/Microsoft.VSCode.CPP.Extension.darwin",
				"/home/genzix/.vscode/extensions/ms-vscode.cpptools-0.16.1/bin/Microsoft.VSCode.CPP.IntelliSense.Msvc.darwin"
			]
		},
		{
			"description": "C/C++ language components (Windows)",
			"url": "https://go.microsoft.com/fwlink/?linkid=871267",
			"platforms": [
				"win32"
			],
			"binaries": []
		},
		{
			"description": "ClangFormat (Linux / x86_64)",
			"url": "https://go.microsoft.com/fwlink/?LinkID=848955",
			"platforms": [
				"linux"
			],
			"architectures": [
				"x86_64"
			],
			"binaries": [
				"/home/genzix/.vscode/extensions/ms-vscode.cpptools-0.16.1/LLVM/bin/clang-format"
			],
			"tmpFile": {
				"name": "/tmp/package-15536I499LxeFbxjZ.tmp",
				"fd": 34
			}
		},
		{
			"description": "ClangFormat (Linux / x86)",
			"url": "https://go.microsoft.com/fwlink/?LinkID=864640",
			"platforms": [
				"linux"
			],
			"architectures": [
				"x86",
				"i686",
				"i386"
			],
			"binaries": [
				"/home/genzix/.vscode/extensions/ms-vscode.cpptools-0.16.1/LLVM/bin/clang-format"
			]
		},
		{
			"description": "ClangFormat (OS X)",
			"url": "https://go.microsoft.com/fwlink/?LinkID=848956",
			"platforms": [
				"darwin"
			],
			"binaries": [
				"/home/genzix/.vscode/extensions/ms-vscode.cpptools-0.16.1/LLVM/bin/clang-format.darwin"
			]
		},
		{
			"description": "ClangFormat (Windows)",
			"url": "https://go.microsoft.com/fwlink/?LinkID=848957",
			"platforms": [
				"win32"
			],
			"binaries": []
		},
		{
			"description": "Mono Framework Assemblies",
			"url": "https://go.microsoft.com/fwlink/?LinkId=816539",
			"platforms": [
				"linux",
				"darwin"
			],
			"binaries": [],
			"tmpFile": {
				"name": "/tmp/package-15536nPGE7O24WrEf.tmp",
				"fd": 46
			}
		},
		{
			"description": "Mono Runtime (Linux / x86)",
			"url": "https://go.microsoft.com/fwlink/?LinkId=816540",
			"platforms": [
				"linux"
			],
			"architectures": [
				"x86",
				"i686",
				"i386"
			],
			"binaries": [
				"/home/genzix/.vscode/extensions/ms-vscode.cpptools-0.16.1/debugAdapters/mono.linux-x86"
			]
		},
		{
			"description": "Mono Runtime (Linux / x86_64)",
			"url": "https://go.microsoft.com/fwlink/?LinkId=816541",
			"platforms": [
				"linux"
			],
			"architectures": [
				"x86_64"
			],
			"binaries": [
				"/home/genzix/.vscode/extensions/ms-vscode.cpptools-0.16.1/debugAdapters/mono.linux-x86_64"
			],
			"tmpFile": {
				"name": "/tmp/package-15536O3ePMIT2Glcl.tmp",
				"fd": 47
			}
		},
		{
			"description": "Mono Runtime (OS X)",
			"url": "https://go.microsoft.com/fwlink/?LinkId=816542",
			"platforms": [
				"darwin"
			],
			"binaries": [
				"/home/genzix/.vscode/extensions/ms-vscode.cpptools-0.16.1/debugAdapters/mono.osx"
			]
		},
		{
			"description": "LLDB 3.8.0 (OS X)",
			"url": "https://go.microsoft.com/fwlink/?LinkID=817244",
			"platforms": [
				"darwin"
			],
			"binaries": [
				"/home/genzix/.vscode/extensions/ms-vscode.cpptools-0.16.1/debugAdapters/lldb/bin/debugserver",
				"/home/genzix/.vscode/extensions/ms-vscode.cpptools-0.16.1/debugAdapters/lldb/bin/lldb-mi",
				"/home/genzix/.vscode/extensions/ms-vscode.cpptools-0.16.1/debugAdapters/lldb/bin/lldb-argdumper",
				"/home/genzix/.vscode/extensions/ms-vscode.cpptools-0.16.1/debugAdapters/lldb/bin/lldb-launcher"
			]
		},
		{
			"description": "Visual Studio Windows Debugger",
			"url": "https://go.microsoft.com/fwlink/?linkid=852926",
			"platforms": [
				"win32"
			],
			"binaries": []
		}
	],
	"uuid": "690b692e-e8a9-493f-b802-8089d50ac1b2",
	"isBuiltin": false,
	"id": "ms-vscode.cpptools",
	"extensionFolderPath": "/home/genzix/.vscode/extensions/ms-vscode.cpptools-0.16.1",
	"__metadata": {
		"id": "690b692e-e8a9-493f-b802-8089d50ac1b2",
		"publisherDisplayName": "Microsoft",
		"publisherId": "5f5636e7-69ed-4afe-b5d6-8d231fb3d3ee"
	}
}