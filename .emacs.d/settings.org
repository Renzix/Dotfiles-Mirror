* Pre Config
  Preconfiguration. For extra functions and better defaults
** Themes
   Choose Theme
   #+BEGIN_SRC emacs-lisp
     (defun disable-all-themes ()
       "disable all active themes."
       (interactive)
       (dolist (i custom-enabled-themes)
	 (disable-theme i)))

     (cond ((eq system-type 'darwin) 
	    (use-package apropospriate-theme 
	      :init (setq my:theme 'apropospriate-dark)))
	   ((eq system-type 'gnu/linux)
	    (use-package dracula-theme 
	      :init (setq my:theme 'dracula)))
	   ((eq system-type 'windows-nt)
	    (use-package nord-theme 
	      :init (setq my:theme 'nord)))
	   ((eq system-type 'berkeley-unix) 
	    (use-package monokai-theme 
	      :init (setq my:theme 'monokai)))
	   ((eq system-type 'cygwin) 
	    (use-package spacemacs-theme 
	      :init (setq my:theme 'spacemacs-dark))))
     (disable-all-themes)
     (load-theme my:theme t t)
   #+END_SRC
** Better Defaults
   Gets rid of default options for display
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-screen t
	   initial-buffer-choice 'eshell)
     (menu-bar-mode -1)
     (tool-bar-mode -1)
     (scroll-bar-mode -1)
     (display-battery-mode)
     (display-time)
   #+END_SRC
** Lines
   Makes VI relative line numbering
   #+BEGIN_SRC emacs-lisp
     (global-display-line-numbers-mode)
     (setq-default display-line-numbers-type 'relative
		   display-line-numbers-current-absolute t
		   display-line-numbers-width 4
		   display-line-numbers-widen t)
   #+END_SRC
** General
   #+BEGIN_SRC emacs-lisp
     (use-package quelpa
       :init '(setq quelpa-upgrade-p t
		    quelpa-stable-p t))
     (use-package quelpa-use-package)
     (use-package general
       :after evil
       :init
       (setq general-override-states '(insert
				       emacs
				       hybrid
				       normal
				       visual
				       motion
				       operator
				       replace))
       :config 
       (general-evil-setup t)
       )
     (use-package which-key
       :config (which-key-mode))
     (defvar HOME (getenv "HOME"))
     ;; Defines passwords and current desktop (either chromebook, main, or laptop) so i dont have to make multiple git repos
     (load-file (concat HOME "/.emacs.d/private.el"))
     ;; I have no fucking idea why this doesnt work further down or in :init for use packages so im just gonna put it here
   #+END_SRC
** Extra Functions
   #+BEGIN_SRC emacs-lisp
     (defun open-emacs-config ()
       "Opens my emacs config uwu"
       (interactive)
       (find-file (concat HOME "/.emacs.d/settings.org")))

     (defun load-emacs-config ()
       "Reloads my emacs config uwu"
       (interactive)
       (load-file (concat HOME "/.emacs.d/init.el")))
     (defun org-get-keyword (KEYWORD)
       "get the value from a line like this
			 ,#+KEYWORD: value
			 in a file."
       (interactive)
       (let ((case-fold-search t)
	     (re (format "^#\\+%s:[ \t]+\\([^\t\n]+\\)" KEYWORD)))
	 (if (not (save-excursion
		    (or (re-search-forward re nil t)
			(re-search-backward re nil t))))
	     (error (format "No line containing #+%s: value found" KEYWORD)))
	 (match-string 1)))
     (defun eshell-clear ()
       "Clear the eshell buffer."
       (let ((inhibit-read-only t))
	 (erase-buffer)
	 (eshell-send-input)))
     (defun kill-other-buffers ()
       "Kill all other buffers."
       (interactive)
       (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))

     (defun rename-file-and-buffer (new-name)
       "Renames both current buffer and file it's visiting to NEW-NAME."
       (interactive "New name: ")
       (let ((name (buffer-name))
	     (filename (buffer-file-name)))
	 (if (not filename)
	     (message "Buffer '%s' is not visiting a file!" name)
	   (if (get-buffer new-name)
	       (message "A buffer named '%s' already exists!" new-name)
	     (progn
	       (rename-file filename new-name 1)
	       (rename-buffer new-name)
	       (set-visited-file-name new-name)
	       (set-buffer-modified-p nil))))))

     (defun delete-file-and-buffer ()
       "Kill the current buffer and deletes the file it is visiting."
       (interactive)
       (let ((filename (buffer-file-name)))
	 (when filename
	   (if (vc-backend filename)
	       (vc-delete-file filename)
	     (progn
	       (delete-file filename)
	       (message "Deleted file %s" filename)
	       (kill-buffer))))))

     (defun sudo-edit (&optional arg)
       (interactive "P")
       (if (or arg (not buffer-file-name))
	   (find-file (concat "/sudo:root@localhost:"
			      (ido-read-file-name "Find file(as root): ")))
	 (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
     (defun doas-edit (&optional arg)
       (interactive "P")
       (if (or arg (not buffer-file-name))
	   (find-file (concat "/doas:root@localhost:"
			      (ido-read-file-name "Find file(as root): ")))
	 (find-alternate-file (concat "/doas:root@localhost:" buffer-file-name))))

     (defun get-string-from-file (filePath)
       "Return filePath's file content."
       (with-temp-buffer
	 (insert-file-contents filePath)
	 (buffer-string)))
     (defun helm-projectile-find-file-or-project () 
       "Does switch project if not in a project and find-file if in one"
       (interactive)
       (if (projectile-project-p)
	   (helm-projectile-find-file)
	 (helm-projectile-switch-project)))
     (defun helm-projectile-rg-or-project () 
       "Does switch project if not in a project and find-file if in one"
       (interactive)
       (if (projectile-project-p)
	   (helm-projectile-rg)
	 (helm-projectile-switch-project)))


   #+END_SRC
* Helm
  Helm stuff
  #+BEGIN_SRC emacs-lisp
    (use-package helm
      :config
      (helm-autoresize-mode t)
      (setq helm-autoresize-max-height 30)
      (setq helm-display-header-line nil)
      (define-key helm-map (kbd "TAB") 'helm-execute-persistent-action)
      (helm-mode t))
  #+END_SRC
* Evil God Mode
  Evil Mode Settings and keybindings
  #+BEGIN_SRC emacs-lisp
    (use-package evil
      :init
      (setq evil-want-integration t
	    evil-want-C-i-jump nil
	    evil-want-keybinding nil
	    evil-cross-lines t)
      :config 
      (evil-mode t))
    (use-package evil-god-state
      :config 
      (which-key-enable-god-mode-support)
      (evil-define-key 'god global-map [escape] 'evil-god-state-bail))
    (use-package evil-collection
      :after evil
      :config 
      (evil-collection-init)
      ;; Useful overrides for normal mode
      (general-define-key
       :states '(normal)
       :keymaps 'override
       (kbd "SPC") 'evil-execute-in-god-state
       (kbd "<space>") 'evil-execute-in-god-state
       (kbd ";") 'helm-M-x
       (kbd "g c") 'comment-line
       (kbd "g =") 'indent-buffer
       (kbd "RET") 'helm-buffers-list
       (kbd "g p") 'projectile-command-map
       (kbd "\\") 'helm-projectile-rg-or-project
       (kbd "|") 'helm-projectile-find-file-or-project
       (kbd "`") 'magit-status)

      ;; My Modifier style keybinds
      (general-define-key
       :states '(normal insert motion visual)
       :keymaps 'override
       (kbd "M-h") 'evil-window-left
       (kbd "M-j") 'evil-window-down
       (kbd "M-k") 'evil-window-up
       (kbd "M-l") 'evil-window-right
       (kbd "M-v") 'evil-window-vsplit
       (kbd "M-s") 'evil-window-split
       (kbd "M-e") 'helm-find-files
       (kbd "M-H") 'evil-window-move-far-left
       (kbd "M-L") 'evil-window-move-far-right
       (kbd "M-J") 'evil-window-move-very-bottom
       (kbd "M-K") 'evil-window-move-very-top
       (kbd "M-d") 'evil-delete-buffer
       (kbd "M-D") 'delete-file-and-buffer
       (kbd "M-c") 'evil-window-delete
       (kbd "M-o") 'delete-other-windows
       (kbd "M--") 'evil-window-decrease-height
       (kbd "M-=") 'evil-window-increase-height
       (kbd "M-_") 'evil-window-decrease-width
       (kbd "M-+") 'evil-window-increase-width
       (kbd "M-'") 'eshell
       (kbd "M-\"") 'term
       (kbd "M-ESC") 'kill-emacs)
      ;; EX Command style 
      (evil-ex-define-cmd "em" 'helm-find-files)
      (evil-ex-define-cmd "bl" 'helm-buffers-list)
      (evil-ex-define-cmd "bm" 'helm-bookmarks)
      (evil-ex-define-cmd "fd" 'delete-file-and-buffer)
      (evil-ex-define-cmd "es" 'eshell)
      (evil-ex-define-cmd "te" 'vterm)
      (evil-ex-define-cmd "lc" 'helm-locate)
      (evil-ex-define-cmd "h" 'evil-window-left)
      (evil-ex-define-cmd "j" 'evil-window-down)
      (evil-ex-define-cmd "k" 'evil-window-up)
      (evil-ex-define-cmd "l" 'evil-window-right)
      (evil-ex-define-cmd "mh" 'evil-window-move-far-left)
      (evil-ex-define-cmd "mj" 'evil-window-move-very-bottom)
      (evil-ex-define-cmd "mk" 'evil-window-very-top)
      (evil-ex-define-cmd "ml" 'evil-window-far-right)
      (evil-ex-define-cmd "kr" 'helm-show-kill-ring)
      (evil-ex-define-cmd "nn" 'tracking-next-buffer)
      (evil-ex-define-cmd "pn" 'tracking-previous-buffer)
      (evil-ex-define-cmd "cfg" 'open-emacs-config)
      (evil-ex-define-cmd "load" 'load-emacs-config)
      (evil-ex-define-cmd "bb" 'xref-pop-marker-stack)
      )
  #+END_SRC
* Programming
** Company
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :init
       (add-hook 'after-init-hook 'global-company-mode)
       (setq company-require-match 'never
	     company-minimum-prefix-length 0
	     company-tooltip-align-annotations t
	     company-idle-delay 1
	     company-dabbrev-downcase 0
	     company-tooltip-limit 20
	     global-company-mode t)
       :config
       (progn
	 (define-key company-active-map (kbd "S-TAB") 'company-select-previous)
	 (define-key company-active-map (kbd "<backtab>") 'company-select-previous)
	 (define-key company-active-map (kbd "<return>") nil)
	 (define-key company-active-map (kbd "RET") nil)
	 (define-key company-active-map (kbd "C-SPC") #'company-complete-selection)
	 (define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)))
   #+END_SRC
** Projectile
   #+BEGIN_SRC emacs-lisp
     (use-package helm-projectile
       :init
       (setq projectile-enable-caching t
	     projectile-file-exists-local-cache-expire (* 5 60)
	     projectile-file-exists-remote-cache-expire (* 10 60)
	     projectile-switch-project-action 'helm-projectile-find-file
	     projectile-sort-order 'recently-active)
       :config
       (projectile-mode t))
   #+END_SRC
** Git
   #+BEGIN_SRC emacs-lisp
     (use-package evil-magit)
     (use-package git-timemachine)
     (use-package git-gutter
       :config
       (global-git-gutter-mode))
     ;;(use-package forge ; @TODO(renzix): When this gets stable i should use it uwu
     ;;  :after evil-magit)
   #+END_SRC
** Rust
   #+BEGIN_SRC emacs-lisp
     (use-package rust-mode)
     (use-package rustic
       :init
       (setq racer-cmd (concat HOME "/.cargo/bin/racer")
	     rustic-format-on-save t))
     (use-package cargo)
     (use-package lsp-mode)
     (use-package clippy)
     (use-package racer
       :init
       (add-hook 'rust-mode-hook #'racer-mode)
       (add-hook 'racer-mode-hook #'eldoc-mode))

     (general-define-key
      :states '(normal)
      :prefix "g r"
      (kbd "c") 'rustic-cargo-build
      (kbd "C") 'rustic-recompile
      (kbd "p") 'rustic-popup
      (kbd "t") 'rustic-cargo-test
      (kbd "r") 'rustic-cargo-run
      (kbd "o") 'rustic-cargo-outdated)

     (general-define-key
      :states '(normal)
      :keymaps 'rustic-mode-map
      :prefix "," 
      (kbd ".") 'racer-find-definition
      (kbd "d") 'racer-describe-tooltip
      (kbd "f") 'rustic-format-buffer)
   #+END_SRC
** Python
   #+BEGIN_SRC emacs-lisp
     (use-package company-jedi
       :init 
       (add-hook 'python-mode-hook 'flycheck-mode)
       :config
       (add-to-list 'company-backends 'company-jedi))

     (general-define-key
      :states '(normal)
      :keymaps 'python-mode-map
      :prefix "," 
      (kbd "d") 'jedi:show-doc
      (kbd ".") 'jedi:goto-definition
      (kbd "c") 'python-check)
   #+END_SRC
** C/CPP 
   #+BEGIN_SRC emacs-lisp
     (use-package irony
       :init
       (progn (add-hook 'c++-mode-hook 'irony-mode)
	      (add-hook 'c-mode-hook 'irony-mode)
	      (add-hook 'objc-mode-hook 'irony-mode)
	      (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)))
     (use-package flycheck-irony
       :init
       (add-hook 'irony-mode-hook 'flycheck-mode)
       (add-hook 'flycheck-mode-hook #'flycheck-irony-setup))
     (use-package irony-eldoc
       :init 
       (add-hook 'irony-mode-hook #'irony-eldoc))
     (use-package company-irony
       :config
       (add-to-list 'company-backends 'company-irony))
     (use-package company-irony-c-headers)

     (defadvice find-tag (around refresh-etags activate)
       "Rerun etags and reload tags if tag not found and redo find-tag.              
	   If buffer is modified, ask about save before running etags."
       (let ((extension (file-name-extension (buffer-file-name))))
	 (condition-case err
	     ad-do-it
	   (error (and (buffer-modified-p)
		       (not (ding))
		       (y-or-n-p "Buffer is modified, save it? ")
		       (save-buffer))
		  (er-refresh-etags extension)
		  ad-do-it))))


     (defun er-refresh-etags (&optional extension)
       "Run etags on all peer files in current dir and reload them silently."
       (interactive)
       (shell-command (format "etags *.%s" (or extension "el")))
       (let ((tags-revert-without-query t))  ; don't query, revert silently          
	 (visit-tags-table default-directory nil)))

     (general-define-key ;;C/CPP keys
      :states '(normal motion)
      :keymaps 'irony-mode-map
      :prefix ","
      (kbd ".") 'xref-find-definition
      (kbd "S-.") 'xref-find-definition-other-window
      (kbd "h") 'ff-find-other-file)
   #+END_SRC
** JVM langauges
   #+BEGIN_SRC emacs-lisp
     (use-package ensime
       :init
       (setq ensime-search-interface 'helm)
       (add-hook 'scala-mode-hook 'ensime-scala-mode-hook))
   #+END_SRC
** Haskell   
   #+BEGIN_SRC emacs-lisp
     (use-package haskell-mode)
     (use-package lsp-haskell
       :init (add-hook 'haskell-mode-hook #'lsp))
     (use-package flycheck-haskell
       :init (add-hook 'haskell-mode-hook #'flycheck-haskell-setup))
   #+END_SRC
** Lisp
   #+BEGIN_SRC emacs-lisp
     ;;(setq inferior-lisp-program "/usr/bin/sbcl")
     ;;(use-package slime)
     ;;(require 'slime-autoloads)
     ;;(slime-setup '(slime-fancy))
   #+END_SRC
** Misc Programming
   @TODO (renzix): Add Keyword highlighter
   #+BEGIN_SRC emacs-lisp
     (use-package autopair
       :config (autopair-global-mode t))
     (use-package minimap
       :init (setq minimap-window-location 'right))
     (use-package treemacs)
     (use-package treemacs-projectile
       :after treemacs projectile)
     (use-package treemacs-evil
       :after treemacs evil)
     (use-package treemacs-magit
       :after treemacs magit)

     ;; Auto indent on save
     (defun indent-buffer ()
       (interactive)
       (save-excursion
	 (indent-region (point-min) (point-max) nil)))
     ;;(add-hook 'before-save-hook 'indent-buffer)
   #+END_SRC
* Normal Tasks
** Org
   Some basic configuration for org mode incluing access to executing
   python,sql,emacs-lisp and latex. Also some keybinds
   #+BEGIN_SRC emacs-lisp
     (setq default-major-mode 'org-mode
	   org-display-custom-times t
	   org-export-date-timestamp-format '("%e %b %Y" . "<%a %b %e %Y %H:%M>")
	   org-time-stamp-custom-formats '("%e %b %Y" . "<%a %b %e %Y %H:%M>")
	   org-src-tab-acts-natively t
	   org-confirm-babel-evaluate nil)
     (use-package helm-flyspell)
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((org . t)
	(latex . t)
	(emacs-lisp . t)
	(sql . t)
	(shell . t)
	(python . t)))
     (general-define-key
      :states '(normal)
      :keymaps 'org-mode-map
      :prefix ","
      (kbd ",") 'org-export-dispatch
      (kbd "RET") (lambda () ((evil-append-line) (org-meta-return)))
      (kbd "t") 'org-time-stamp-inactive
      (kbd "c") 'org-cycle
      (kbd "s") 'org-babel-execute-src-block
      (kbd "b") 'org-cycle-list-bullet
      (kbd "e") 'org-babel-execute-buffer
      (kbd "'") 'org-edit-special)
     (general-define-key
      :states '(normal)
      :keymaps 'orgsrc-mode-map
      :prefix ","
      (kbd "'") 'org-src-exit)

     (use-package ox-pandoc)
     (use-package htmlize)
   #+END_SRC
** pastebin
   #+BEGIN_SRC emacs-lisp
     (use-package webpaste
       :config (setq webpaste-provider-priority '("ix.io"))
       )
   #+END_SRC
** EMMS
   #+BEGIN_SRC emacs-lisp
     (use-package emms 
       :config
       (emms-all)
       (emms-default-players))
   #+END_SRC
** Discord
   #+BEGIN_SRC emacs-lisp
     ;; For Rich presence
     (use-package elcord
       :config (elcord-mode))
   #+END_SRC
** Matrix
   wtf the emacs matrix client is fucking lit
   #+BEGIN_SRC emacs-lisp

     (use-package matrix-client
       :init (setq matrix-client-show-images t
		   matrix-client-show-room-avatars t
		   matrix-client-mark-modified-rooms t
		   matrix-client-use-tracking t
		   matrix-client-render-presence t
		   matrix-client-render-membership t)
       :quelpa ((matrix-client :fetcher github :repo "alphapapa/matrix-client.el"
			       :files (:defaults "logo.png" "matrix-client-standalone.el.sh"))))
     (general-define-key
      :states '(normal)
      :prefix "M-z"
      (kbd ".") 'tracking-previous-buffer
      (kbd ",") 'tracking-next-buffer
      (kbd "m") 'matrix-client-connect
      (kbd "o") 'matrix-client-upload
      (kbd "b") 'matrix-client-switch-buffer)
   #+END_SRC
** IRC/Circe
   #+BEGIN_SRC emacs-lisp

     (defun my-circe-set-margin ()
       (setq right-margin-width 5))
     (add-hook 'lui-mode-hook 'my-circe-set-margin)
     (defun my-circe-prompt ()
       (lui-set-prompt
	(concat (propertize (concat (buffer-name) ">")
			    'face 'circe-prompt-face)
		" ")))
     (defun my-lui-setup ()
       (setq
	fringes-outside-margins t
	right-margin-width 5
	word-wrap t
	wrap-prefix "    "))
     (use-package circe
       :init
       (progn
	 (setq circe-reduce-lurker-spam t
	       circe-network-options
	       '(("Freenode"
		  :nick "Renzix"
		  :channels (:after-auth "#emacs" "#emacs-circe" "#unixporn" "#gentoo" "#distrotube")
		  :nickserv-nick "Renzix"
		  :nickserv-password freenode-password)
		 ("127.0.0.1"
		  :user "Renzix"
		  :port 6667
		  :channels ("#home" "#techsupport" "#devnull" "#wallpapers" "#bots" "#programming" 
			     "#anime" "#hardware" "#voice" "#ricing" "#de" "#wm" "#tools" "#feedback"
			     "#starboard" "#modlog" "#rules" "#announcements")
		  :pass discord-unixporn))
	       circe-format-say "{nick:-16s} {body}"
	       lui-time-stamp-position 'right-margin
	       lui-time-stamp-format "%H:%M"
	       lui-time-stamp-position 'right-margin
	       lui-fill-type nil)

	 (add-hook 'circe-chat-mode-hook 'my-circe-prompt)
	 (add-hook 'lui-mode-hook 'my-lui-setup)))
     (use-package helm-circe)
     (use-package tracking)
     (general-define-key
      :states '(normal)
      :keymaps 'circe-mode-map
      :prefix ","
      (kbd ",") 'tracking-next-buffer
      (kbd "j") 'circe-command-JOIN
      (kbd "p") 'circe-command-PART
      (kbd "b") 'helm-circe)
   #+END_SRC
** Libvterm
   Terminal emulator based off of a real thing stollen from the neovim
   project. its supposed to actually work.
   #+BEGIN_SRC emacs-lisp
     (if (file-directory-p (concat HOME "/Projects/emacs-libvterm"))
	 (progn (add-to-list 'load-path (concat HOME "/Projects/emacs-libvterm"))
		(let (vterm-install)
		  (require 'vterm))
		(setq vterm-shell "ion")

		(general-define-key
		 :states '(normal insert motion visual)
		 :keymaps 'override
		 (kbd "M-\"") 'vterm)))
   #+END_SRC
* Post Config
** Backups
   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist `(("." . "~/.saves"))
	   backup-by-copying t
	   delete-old-versions t
	   kept-new-versions 10
	   kept-old-versions 10
	   version-control t)
   #+END_SRC
** Misc
   @TODO(renzix): Make this neat?
   #+BEGIN_SRC emacs-lisp
     (defvar my:theme-window-loaded nil)
     (defvar my:theme-terminal-loaded nil)

     (if (daemonp)
	 (add-hook 'after-make-frame-functions(lambda (frame)
						(select-frame frame)
						(if (window-system frame)
						    (unless my:theme-window-loaded
						      (if my:theme-terminal-loaded
							  (enable-theme my:theme)
							(load-theme my:theme t))
						      (setq my:theme-window-loaded t))
						  (unless my:theme-terminal-loaded
						    (if my:theme-window-loaded
							(enable-theme my:theme)
						      (load-theme my:theme t))
						    (setq my:theme-terminal-loaded t)))))
       (progn
	 (load-theme my:theme t)
	 (if (display-graphic-p)
	     (setq my:theme-window-loaded t)
	   (setq my:theme-terminal-loaded t))))

     ;;On save it adds buffer to bookmarks. LastSave is every time and get overridden while projectile is only 
     ;;if in a projectile dir. the last one is every file that is saved gets added.
     (add-hook 'after-save-hook '(lambda () (bookmark-set "LastSave" nil)))
     (add-hook 'after-save-hook '(lambda () (if (projectile-file-exists-p (buffer-name)) (bookmark-set (concat "LastPro" (projectile-project-name)) nil))))
     (add-hook 'after-save-hook '(lambda () (bookmark-set (buffer-name) nil)))

   #+END_SRC
   
   
