* Pre Config
  Preconfiguration. For extra functions and better defaults
** Themes
   Choose Theme
   #+BEGIN_SRC emacs-lisp
     (use-package apropospriate-theme)
     (use-package nord-theme);
     ;; :config (load-theme 'nord nil))
     (load-theme 'apropospriate-dark t)
   #+END_SRC
** Better Defaults
   Gets rid of default options for display
   #+BEGIN_SRC emacs-lisp
     (menu-bar-mode -1)
     (tool-bar-mode -1)
     (scroll-bar-mode -1)
     (display-battery-mode)
     (display-time)
   #+END_SRC
** Lines
   Makes VI relative line numbering
   #+BEGIN_SRC emacs-lisp
     (global-display-line-numbers-mode)
     (setq-default display-line-numbers-type 'relative
		   display-line-numbers-current-absolute t
		   display-line-numbers-width 4
		   display-line-numbers-widen t)
   #+END_SRC
** General
   #+BEGIN_SRC emacs-lisp
     (use-package quelpa
       :init '(setq quelpa-upgrade-p t
		    quelpa-stable-p t))
     (use-package quelpa-use-package)
     (use-package general
       :after evil
       :init
       (setq general-override-states '(insert
				       emacs
				       hybrid
				       normal
				       visual
				       motion
				       operator
				       replace))
       :config 
       (general-evil-setup t)
       )
     (use-package which-key
       :config (which-key-mode))
     (defvar HOME (getenv "HOME"))
     ;; Defines passwords and current desktop (either chromebook, main, or laptop) so i dont have to make multiple git repos
     (load-file (concat HOME "/.emacs.d/private.el"))
     ;; I have no fucking idea why this doesnt work further down or in :init for use packages so im just gonna put it here
   #+END_SRC
** Extra Functions
   #+BEGIN_SRC emacs-lisp
     (defun open-emacs-config ()
       "Opens my emacs config uwu"
       (interactive)
       (find-file (concat HOME "/.emacs.d/settings.org")))

     (defun load-emacs-config ()
       "Reloads my emacs config uwu"
       (interactive)
       (load-file (concat HOME "/.emacs.d/init.el")))
     (defun org-get-keyword (KEYWORD)
       "get the value from a line like this
			 ,#+KEYWORD: value
			 in a file."
       (interactive)
       (let ((case-fold-search t)
	     (re (format "^#\\+%s:[ \t]+\\([^\t\n]+\\)" KEYWORD)))
	 (if (not (save-excursion
		    (or (re-search-forward re nil t)
			(re-search-backward re nil t))))
	     (error (format "No line containing #+%s: value found" KEYWORD)))
	 (match-string 1)))
     (defun eshell-clear ()
       "Clear the eshell buffer."
       (let ((inhibit-read-only t))
	 (erase-buffer)
	 (eshell-send-input)))
     (defun kill-other-buffers ()
       "Kill all other buffers."
       (interactive)
       (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))

     (defun rename-file-and-buffer (new-name)
       "Renames both current buffer and file it's visiting to NEW-NAME."
       (interactive "New name: ")
       (let ((name (buffer-name))
	     (filename (buffer-file-name)))
	 (if (not filename)
	     (message "Buffer '%s' is not visiting a file!" name)
	   (if (get-buffer new-name)
	       (message "A buffer named '%s' already exists!" new-name)
	     (progn
	       (rename-file filename new-name 1)
	       (rename-buffer new-name)
	       (set-visited-file-name new-name)
	       (set-buffer-modified-p nil))))))

     (defun delete-file-and-buffer ()
       "Kill the current buffer and deletes the file it is visiting."
       (interactive)
       (let ((filename (buffer-file-name)))
	 (when filename
	   (if (vc-backend filename)
	       (vc-delete-file filename)
	     (progn
	       (delete-file filename)
	       (message "Deleted file %s" filename)
	       (kill-buffer))))))

     (defun sudo-edit (&optional arg)
       (interactive "P")
       (if (or arg (not buffer-file-name))
	   (find-file (concat "/sudo:root@localhost:"
			      (ido-read-file-name "Find file(as root): ")))
	 (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
     (defun doas-edit (&optional arg)
       (interactive "P")
       (if (or arg (not buffer-file-name))
	   (find-file (concat "/doas:root@localhost:"
			      (ido-read-file-name "Find file(as root): ")))
	 (find-alternate-file (concat "/doas:root@localhost:" buffer-file-name))))

     (defun get-string-from-file (filePath)
       "Return filePath's file content."
       (with-temp-buffer
	 (insert-file-contents filePath)
	 (buffer-string)))
     (defun helm-projectile-find-file-or-project () 
       "Does switch project if not in a project and find-file if in one"
       (interactive)
       (if (projectile-project-p)
	   (helm-projectile-find-file)
	 (helm-projectile-switch-project)))
     (defun helm-projectile-rg-or-project () 
       "Does switch project if not in a project and find-file if in one"
       (interactive)
       (if (projectile-project-p)
	   (helm-projectile-rg)
	 (helm-projectile-switch-project)))


   #+END_SRC
* Helm
  Helm stuff
  #+BEGIN_SRC emacs-lisp
    (use-package helm
      :config 
      (helm-autoresize-mode t)
      (setq helm-autoresize-max-height 30)
      (setq helm-display-header-line nil)
      (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
      (helm-mode t))
  #+END_SRC
* Evil Mode
  Evil Mode Settings and keybindings
  #+BEGIN_SRC emacs-lisp
    (use-package evil
      :init
      (setq evil-want-integration t
	    evil-want-keybinding nil
	    evil-cross-lines t)
      :config 
      (evil-mode t))
    (use-package evil-collection
      :after evil
      :config 
      (evil-collection-init)
      ;; Useful overrides for normal mode
      (general-nmap "," (general-simulate-key "C-c" :state 'normal)) ;; If i didnt add special keybinds for minor mode use the default C-c
      (general-define-key
       :states '(normal)
       :keymaps 'override
       (kbd ";") 'helm-M-x
       (kbd "g c") 'comment-line
       (kbd "g p") 'projectile-command-map
       (kbd "g s") 'flyspell-correct-word-generic
       (kbd "SPC") 'helm-run-external-command ; @TODO(renzix): Make this actually useful
       (kbd "\\") 'helm-projectile-rg-or-project
       (kbd "|") 'helm-projectile-find-file-or-project
       (kbd "`") 'magit-status)

      ;; My Modifier style keybinds
      (general-define-key
       :states '(normal insert motion visual)
       :keymaps 'override
       (kbd "M-h") 'evil-window-left
       (kbd "M-j") 'evil-window-down
       (kbd "M-k") 'evil-window-up
       (kbd "M-l") 'evil-window-right
       (kbd "M-v") 'evil-window-vsplit
       (kbd "M-s") 'evil-window-split
       (kbd "M-e") 'helm-find-files
       (kbd "M-H") 'evil-window-move-far-left
       (kbd "M-L") 'evil-window-move-far-right
       (kbd "M-J") 'evil-window-move-very-bottom
       (kbd "M-K") 'evil-window-move-very-top
       (kbd "M-d") 'evil-delete-buffer
       (kbd "M-D") 'delete-file-and-buffer
       (kbd "M-c") 'evil-window-delete
       (kbd "M-o") 'delete-other-windows
       (kbd "M--") 'evil-window-decrease-height
       (kbd "M-=") 'evil-window-increase-height
       (kbd "M-_") 'evil-window-decrease-width
       (kbd "M-+") 'evil-window-increase-width
       (kbd "M-'") 'eshell
       (kbd "M-\"") 'vterm
       (kbd "M-ESC") 'kill-emacs)
      ;; EX Command style 
      (evil-ex-define-cmd "em" 'helm-find-files)
      (evil-ex-define-cmd "bl" 'helm-buffers-list)
      (evil-ex-define-cmd "bm" 'helm-bookmarks)
      (evil-ex-define-cmd "fd" 'delete-file-and-buffer)
      (evil-ex-define-cmd "es" 'eshell)
      (evil-ex-define-cmd "te" 'vterm)
      (evil-ex-define-cmd "lc" 'helm-locate)
      (evil-ex-define-cmd "h" 'evil-window-left)
      (evil-ex-define-cmd "j" 'evil-window-down)
      (evil-ex-define-cmd "k" 'evil-window-up)
      (evil-ex-define-cmd "l" 'evil-window-right)
      (evil-ex-define-cmd "mh" 'evil-window-move-far-left)
      (evil-ex-define-cmd "mj" 'evil-window-move-very-bottom)
      (evil-ex-define-cmd "mk" 'evil-window-very-top)
      (evil-ex-define-cmd "ml" 'evil-window-far-right)
      (evil-ex-define-cmd "kr" 'helm-show-kill-ring)
      (evil-ex-define-cmd "nn" 'tracking-next-buffer)
      (evil-ex-define-cmd "pn" 'tracking-previous-buffer)
      (evil-ex-define-cmd "cfg" 'open-emacs-config)
      (evil-ex-define-cmd "load" 'load-emacs-config)
      (evil-ex-define-cmd "bb" 'xref-pop-marker-stack)
      )
  #+END_SRC
* Programming
** Company
   #+BEGIN_SRC emacs-lisp
     (use-package company)
     (add-hook 'after-init-hook 'global-company-mode)
     (setq company-require-match 'never
	   company-minimum-prefix-length 0
	   company-tooltip-align-annotations t
	   company-idle-delay 1
	   company-dabbrev-downcase 0
	   company-tooltip-limit 20
	   global-company-mode t)
     (eval-after-load 'company
       '(progn
	  (define-key company-active-map (kbd "S-TAB") 'company-select-previous)
	  (define-key company-active-map (kbd "<backtab>") 'company-select-previous)
	  (define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
	  (define-key company-active-map (kbd "<return>") nil)
	  (define-key company-active-map (kbd "RET") nil)
	  (define-key company-active-map (kbd "C-SPC") #'company-complete-selection)
	  (define-key company-active-map (kbd "<tab>") 'company-complete-common-or-cycle)))
   #+END_SRC
** Projectile
   #+BEGIN_SRC emacs-lisp
     (use-package helm-projectile)
     (setq projectile-enable-caching t)
     (setq projectile-file-exists-local-cache-expire (* 5 60))
     (setq projectile-file-exists-remote-cache-expire (* 10 60))
     (setq projectile-switch-project-action 'helm-projectile-find-file)
     (setq projectile-sort-order 'recently-active)
     (projectile-mode t)
   #+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp
     (use-package evil-magit)
     ;;(use-package forge ; @TODO(renzix): When this gets stable i should use it uwu
     ;;  :after evil-magit)
   #+END_SRC
** Rust
   #+BEGIN_SRC emacs-lisp
     (use-package rust-mode)
     (use-package rustic)
     (use-package cargo)
     (use-package lsp-mode)
     (use-package clippy)
     (use-package racer)
     (setq racer-cmd (concat HOME "/.cargo/bin/racer")
	   rustic-format-on-save t)
     (add-hook 'rust-mode-hook #'racer-mode)
     (add-hook 'racer-mode-hook #'eldoc-mode)
     ;;(add-hook 'racer-mode-hook 'company-mode)

     (general-define-key
      :states '(normal)
      :prefix "g r"
      (kbd "c") 'rustic-cargo-build
      (kbd "C") 'rustic-recompile
      (kbd "p") 'rustic-popup
      (kbd "t") 'rustic-cargo-test
      (kbd "r") 'rustic-cargo-run
      (kbd "o") 'rustic-cargo-outdated)

     (general-define-key
      :states '(normal)
      :keymaps 'rustic-mode-map
      :prefix "," 
      (kbd ".") 'racer-find-definition
      (kbd "d") 'racer-describe-tooltip
      (kbd "f") 'rustic-format-buffer)
   #+END_SRC
** Python
   #+BEGIN_SRC emacs-lisp
     (use-package company-jedi)

     ;;(add-hook 'python-mode-hook 'company-mode)
     (add-hook 'python-mode-hook 'flycheck-mode)
     (eval-after-load 'company
       '(add-to-list 'company-backends 'company-jedi))


     (general-define-key
      :states '(normal)
      :keymaps 'python-mode-map
      :prefix "," 
      (kbd "d") 'jedi:show-doc
      (kbd ".") 'jedi:goto-definition
      (kbd "c") 'python-check)
   #+END_SRC
** C/CPP 
   #+BEGIN_SRC emacs-lisp
     (use-package irony)
     (use-package flycheck-irony)
     (use-package irony-eldoc)
     (use-package company-irony)
     (use-package company-irony-c-headers)
     (add-hook 'c++-mode-hook 'irony-mode)
     (add-hook 'c-mode-hook 'irony-mode)
     (add-hook 'objc-mode-hook 'irony-mode)

     ;;(add-hook 'irony-mode-hook 'company-mode)
     (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
     (add-hook 'irony-mode-hook #'irony-eldoc)
     (add-hook 'irony-mode-hook 'flycheck-mode)
     (add-hook 'flycheck-mode-hook #'flycheck-irony-setup)

     (eval-after-load 'company
       '(add-to-list 'company-backends 'company-irony))

     (defadvice find-tag (around refresh-etags activate)
       "Rerun etags and reload tags if tag not found and redo find-tag.              
      If buffer is modified, ask about save before running etags."
       (let ((extension (file-name-extension (buffer-file-name))))
	 (condition-case err
	     ad-do-it
	   (error (and (buffer-modified-p)
		       (not (ding))
		       (y-or-n-p "Buffer is modified, save it? ")
		       (save-buffer))
		  (er-refresh-etags extension)
		  ad-do-it))))


     (defun er-refresh-etags (&optional extension)
       "Run etags on all peer files in current dir and reload them silently."
       (interactive)
       (shell-command (format "etags *.%s" (or extension "el")))
       (let ((tags-revert-without-query t))  ; don't query, revert silently          
	 (visit-tags-table default-directory nil)))

     (general-define-key ;;C/CPP keys
      :states '(normal motion)
      :keymaps 'irony-mode-map
      :prefix ","
      (kbd ".") 'xref-find-definition
      (kbd "S-.") 'xref-find-definition-other-window
      (kbd "h") 'ff-find-other-file)
   #+END_SRC
** JVM langauges
   #+BEGIN_SRC emacs-lisp
     (setq ensime-search-interface 'helm)
     (use-package ensime)
     (add-hook 'scala-mode-hook 'ensime-scala-mode-hook)
   #+END_SRC
** Lisp
   #+BEGIN_SRC emacs-lisp
     ;;(setq inferior-lisp-program "/usr/bin/sbcl")
     ;;(use-package slime)
     ;;(require 'slime-autoloads)
     ;;(slime-setup '(slime-fancy))
   #+END_SRC
** Misc Programming
   @TODO (renzix): Make comments work idk why im writing this cuz im
   gonna delete this once i fix it anyway
   #+BEGIN_SRC emacs-lisp
     (use-package autopair
       :config (autopair-global-mode t))
     (use-package comment-tags)
     (with-eval-after-load "comment-tags"
       (setq comment-tags-keyword-faces
	     `(("@TODO" . ,(list :weight 'bold :foreground "#28ABE3"))
	       ("@FIXME" . ,(list :weight 'bold :foreground "#DB3340"))
	       ("@BUG" . ,(list :weight 'bold :foreground "#DB3340"))
	       ("@HACK" . ,(list :weight 'bold :foreground "#E8B71A"))
	       ("@INFO" . ,(list :weight 'bold :foreground "#F7EAC8"))
	       ("@DONE" . ,(list :weight 'bold :foreground "#1FDA9A"))))
       (setq ;comment-tags-comment-start-only t
	comment-tags-case-sensitive t
	comment-tags-lighter nil)
       (add-hook 'irony-mode-hook 'comment-tags-mode)
       (add-hook 'python-mode-hook 'comment-tags-mode)
       (add-hook 'rustic-mode-hook 'comment-tags-mode)
       (add-hook 'org-mode-hook 'comment-tags-mode))
     ;; Auto indent on save
     (defun indent-buffer ()
       (interactive)
       (save-excursion
	 (indent-region (point-min) (point-max) nil)))
     (add-hook 'before-save-hook 'indent-buffer)
   #+END_SRC
* Normal Tasks
** pb
   @TODO(renzix): Make this into a seperate package???
   @TODO(renzix): Add text support for buffer, file and selection
   #+BEGIN_SRC emacs-lisp
     (defun pb-selection (&optional beg end)
       "Takes a picture based on mouse"
       (interactive (if (use-region-p)
			(list (region-beginning)
			      (region-end))
		      (list (point-min)
			    (point-max))))
       (let ((res (pb--post (buffer-substring beg end))))
	 (kill-new res)
	 (message res)))
     (defun pb-file (file)
       "Takes a picture based on mouse"
       (interactive "fUploaded File: ")
       (let ((res (concat (pb--post (get-string-from-file file)) (file-name-extension))))
	 (kill-new res)
	 (message res)))
     (defun pb-png () ;@TODO(renzix): Doesnt work i need to fix this
       "Takes a picture based on mouse"
       (interactive)
       (let ((res (concat (pb--post (shell-command-to-string "maim -sq")) ".png")))
	 (kill-new res)
	 (message res)))
     (defun pb-get (&optional url) 
       "gets content in a new buffer" 
       (interactive (list (if 
			      (and (not (zerop (length kill-ring))) (string-match-p "http*" (current-kill 0)))
			      (read-string (format "Website Url(%s): " (current-kill 0))) 
			    (read-string "Website Url: "))))
       (if (= (length url) 0) 
	   (browse-url-emacs (current-kill 0))
	 (browse-url-emacs url)))

     (defun pb--post (input) ;get this working almost perfectly
       "Raw pb post function accepts a buncha params"
       (let* ((url "https://ptpb.pw/")
	      (url-request-method "POST")
	      (url-request-extra-headers
	       '(("Content-Type" . "application/x-www-form-urlencoded")))
	      (url-request-data))
	 (setq url-request-data (pb--urlencode `(("c" . ,input))))
	 (with-current-buffer (url-retrieve-synchronously url)
	   (goto-char (point-min))
	   (re-search-forward "https://*" nil t)
	   (buffer-substring (point) (point-at-eol)))))
     (defun pb--urlencode (alis)
       "Map an alist of key/value pairs to an URL-encoded string."
       (mapconcat (lambda (pair)
		    (format "%s=%s"
			    (url-hexify-string
			     (format "%s" (car pair)))
			    (url-hexify-string
			     (format "%s" (if (consp (cdr pair))
					      (cadr pair)
					    (cdr pair))))))
		  alis
		  "&"))
   #+END_SRC

   #+RESULTS:
   : pb--urlencode

** emms/twitch
   #+BEGIN_SRC emacs-lisp
     (use-package emms)
     (emms-all)
     (emms-default-players)
   #+END_SRC
** Discord
   #+BEGIN_SRC emacs-lisp
     ;; For Rich presence
     (use-package elcord)
     (elcord-mode)
   #+END_SRC
** Matrix
   wtf the emacs matrix client is fucking lit
   #+BEGIN_SRC emacs-lisp
     (setq matrix-client-show-images t
	   matrix-client-show-room-avatars t
	   matrix-client-mark-modified-rooms t
	   matrix-client-use-tracking t
	   matrix-client-render-presence t
	   matrix-client-render-membership t)
     (use-package matrix-client
       :quelpa ((matrix-client :fetcher github :repo "alphapapa/matrix-client.el"
			       :files (:defaults "logo.png" "matrix-client-standalone.el.sh"))))
     (general-define-key
      :states '(normal)
      :prefix "M-z"
      (kbd ".") 'tracking-previous-buffer
      (kbd ",") 'tracking-next-buffer
      (kbd "m") 'matrix-client-connect
      (kbd "o") 'matrix-client-upload
      (kbd "b") 'matrix-client-switch-buffer)
   #+END_SRC
** IRC/Circe
   #+BEGIN_SRC emacs-lisp
     (setq circe-reduce-lurker-spam t
	   circe-network-options
	   '(("Freenode"
	      :nick "Renzix"
	      :channels (:after-auth "#emacs" "#emacs-circe" "#unixporn" "#gentoo" "#distrotube")
	      :nickserv-nick "Renzix"
	      :nickserv-password freenode-password)
	     ("127.0.0.1"
	      :user "Renzix"
	      :port 6667
	      :channels ("#home" "#techsupport" "#devnull" "#wallpapers" "#bots" "#programming" 
			 "#anime" "#hardware" "#voice" "#ricing" "#de" "#wm" "#tools" "#feedback"
			 "#starboard" "#modlog" "#rules" "#announcements")
	      :pass discord-unixporn))
	   circe-format-say "{nick:-16s} {body}"
	   lui-time-stamp-position 'right-margin
	   lui-time-stamp-format "%H:%M")
     (defun my-circe-set-margin ()
       (setq right-margin-width 5))
     (add-hook 'lui-mode-hook 'my-circe-set-margin)
     (defun my-circe-prompt ()
       (lui-set-prompt
	(concat (propertize (concat (buffer-name) ">")
			    'face 'circe-prompt-face)
		" ")))
     (add-hook 'circe-chat-mode-hook 'my-circe-prompt)
     (setq
      lui-time-stamp-position 'right-margin
      lui-fill-type nil)

     (add-hook 'lui-mode-hook 'my-lui-setup)
     (defun my-lui-setup ()
       (setq
	fringes-outside-margins t
	right-margin-width 5
	word-wrap t
	wrap-prefix "    "))
     (use-package circe)
     (use-package helm-circe)
     (use-package tracking)
     (general-define-key
      :states '(normal)
      :keymaps 'circe-mode-map
      :prefix ","
      (kbd ",") 'tracking-next-buffer
      (kbd "j") 'circe-command-JOIN
      (kbd "p") 'circe-command-PART
      (kbd "b") 'helm-circe)
   #+END_SRC
** Org
   Some basic configuration for org mode incluing access to executing
   python,sql,emacs-lisp and latex. Also some keybinds
   #+BEGIN_SRC emacs-lisp
     (use-package flyspell-correct-helm)
     (setq-default org-display-custom-times t)
     (setq default-major-mode 'org-mode
	   org-export-date-timestamp-format '("%e %b %Y" . "<%a %b %e %Y %H:%M>")
	   org-time-stamp-custom-formats '("%e %b %Y" . "<%a %b %e %Y %H:%M>")
	   org-confirm-babel-evaluate nil)
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((org . t)
	(latex . t)
	(emacs-lisp . t)
	(sql . t)
	(shell . t)
	(python . t)))
     (general-define-key
      :states '(normal)
      :keymaps 'org-mode-map
      :prefix ","
      (kbd ",") 'org-export-dispatch
      (kbd "RET") (lambda () ((evil-append-line) (org-meta-return)))
      (kbd "t") 'org-time-stamp-inactive
      (kbd "c") 'org-cycle
      (kbd "s") 'org-babel-execute-src-block
      (kbd "b") 'org-cycle-list-bullet
      (kbd "e") 'org-babel-execute-buffer
      (kbd "'") 'org-edit-special)
     (general-define-key
      :states '(normal)
      :keymaps 'orgsrc-mode-map
      :prefix ","
      (kbd "'") 'org-src-exit)

     (use-package ox-pandoc)
     (use-package htmlize)
   #+END_SRC
** Clipboard Manager
   System clipboard manager
   #+BEGIN_SRC emacs-lisp
     (use-package clipmon)
     (add-to-list 'after-init-hook 'clipmon-mode-start)
     (add-to-list 'after-init-hook 'clipmon-persist)
   #+END_SRC
   #+BEGIN_SRC emacs-lisp
   #+END_SRC
** PDF STUFF
   #+BEGIN_SRC emacs-lisp
     (use-package pdf-tools)
     (pdf-loader-install)
   #+END_SRC
* Post Config
** Backups
   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist `(("." . "~/.saves"))
	   backup-by-copying t
	   delete-old-versions t
	   kept-new-versions 6
	   kept-old-versions 2
	   version-control t)
   #+END_SRC
** Misc
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-screen t)
     (setq initial-buffer-choice 'eshell)
     ;; Theme stuff for emacs --daemon idk why it works  @TODO(renzix): Make this work
     (defvar my:theme 'apropospriate-dark)
     (defvar my:theme-window-loaded nil)
     (defvar my:theme-terminal-loaded nil)

     (if (daemonp)
	 (add-hook 'after-make-frame-functions(lambda (frame)
						(select-frame frame)
						(if (window-system frame)
						    (unless my:theme-window-loaded
						      (if my:theme-terminal-loaded
							  (enable-theme my:theme)
							(load-theme my:theme t))
						      (setq my:theme-window-loaded t))
						  (unless my:theme-terminal-loaded
						    (if my:theme-window-loaded
							(enable-theme my:theme)
						      (load-theme my:theme t))
						    (setq my:theme-terminal-loaded t)))))

       (progn
	 (load-theme my:theme t)
	 (if (display-graphic-p)
	     (setq my:theme-window-loaded t)
	   (setq my:theme-terminal-loaded t))))
     (setq org-src-tab-acts-natively t)

     ;;On save it adds buffer to bookmarks. LastSave is every time and get overridden while projectile is only 
     ;;if in a projectile dir. the last one is every file that is saved gets added.
     (add-hook 'after-save-hook '(lambda () (bookmark-set "LastSave" nil)))
     (add-hook 'after-save-hook '(lambda () (if (projectile-file-exists-p (buffer-name)) (bookmark-set (concat "LastPro" (projectile-project-name)) nil))))
     (add-hook 'after-save-hook '(lambda () (bookmark-set (buffer-name) nil)))

   #+END_SRC
   
   
