** Themes
   Choose Theme
   #+BEGIN_SRC emacs-lisp
     (use-package apropospriate-theme)
     (load-theme 'apropospriate-dark t)
   #+END_SRC
** Better Defaults
   Gets rid of default options for display
   #+BEGIN_SRC emacs-lisp
     (menu-bar-mode -1)
     (tool-bar-mode -1)
     (scroll-bar-mode -1)
     (display-battery-mode)
     (display-time)
   #+END_SRC
** Lines
   Makes VI relative line numbering
   #+BEGIN_SRC emacs-lisp
     (global-display-line-numbers-mode)
     (setq-default display-line-numbers-type 'relative
		   display-line-numbers-current-absolute t
		   display-line-numbers-width 4
		   display-line-numbers-widen t)
   #+END_SRC
** General
   #+BEGIN_SRC emacs-lisp
     (use-package quelpa
       :init '(setq quelpa-upgrade-p t
		    quelpa-stable-p t))
     (use-package quelpa-use-package)
     (use-package general
       :after evil
       :init
       (setq general-override-states '(insert
				       emacs
				       hybrid
				       normal
				       visual
				       motion
				       operator
				       replace))
       :config 
       (general-evil-setup t)
       )
     (use-package which-key
       :config (which-key-mode))
     (defvar HOME (getenv "HOME"))
     ;; Defines passwords and current desktop (either chromebook, main, or laptop) so i dont have to make multiple git repos
     (load-file (concat HOME "/.emacs.d/private.el"))
     ;; I have no fucking idea why this doesnt work further down or in :init for use packages so im just gonna put it here
   #+END_SRC
** Extra Functions
   #+BEGIN_SRC emacs-lisp
     (defun open-emacs-config ()
       "Opens my emacs config uwu"
       (interactive)
       (find-file (concat HOME "/.emacs.d/settings.org")))

     (defun load-emacs-config ()
       "Reloads my emacs config uwu"
       (interactive)
       (load-file (concat HOME "/.emacs.d/init.el")))
     (defun org-get-keyword (KEYWORD)
       "get the value from a line like this
		    ,#+KEYWORD: value
		    in a file."
       (interactive)
       (let ((case-fold-search t)
	     (re (format "^#\\+%s:[ \t]+\\([^\t\n]+\\)" KEYWORD)))
	 (if (not (save-excursion
		    (or (re-search-forward re nil t)
			(re-search-backward re nil t))))
	     (error (format "No line containing #+%s: value found" KEYWORD)))
	 (match-string 1)))
     (defun eshell-clear ()
       "Clear the eshell buffer."
       (let ((inhibit-read-only t))
	 (erase-buffer)
	 (eshell-send-input)))
     (defun kill-other-buffers ()
       "Kill all other buffers."
       (interactive)
       (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))

     (defun rename-file-and-buffer (new-name)
       "Renames both current buffer and file it's visiting to NEW-NAME."
       (interactive "New name: ")
       (let ((name (buffer-name))
	     (filename (buffer-file-name)))
	 (if (not filename)
	     (message "Buffer '%s' is not visiting a file!" name)
	   (if (get-buffer new-name)
	       (message "A buffer named '%s' already exists!" new-name)
	     (progn
	       (rename-file filename new-name 1)
	       (rename-buffer new-name)
	       (set-visited-file-name new-name)
	       (set-buffer-modified-p nil))))))

     (defun delete-file-and-buffer ()
       "Kill the current buffer and deletes the file it is visiting."
       (interactive)
       (let ((filename (buffer-file-name)))
	 (when filename
	   (if (vc-backend filename)
	       (vc-delete-file filename)
	     (progn
	       (delete-file filename)
	       (message "Deleted file %s" filename)
	       (kill-buffer))))))

     (defun sudo-edit (&optional arg)
       (interactive "P")
       (if (or arg (not buffer-file-name))
	   (find-file (concat "/sudo:root@localhost:"
			      (ido-read-file-name "Find file(as root): ")))
	 (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))

     (defun get-string-from-file (filePath)
       "Return filePath's file content."
       (with-temp-buffer
	 (insert-file-contents filePath)
	 (buffer-string)))
     (defun helm-projectile-find-file-or-project () 
       "Does switch project if not in a project and find-file if in one"
       (interactive)
       (if (projectile-project-p)
	   (helm-projectile-find-file)
	 (helm-projectile-switch-project)))
     (defun helm-projectile-rg-or-project () 
       "Does switch project if not in a project and find-file if in one"
       (interactive)
       (if (projectile-project-p)
	   (helm-projectile-rg)
	 (helm-projectile-switch-project)))


   #+END_SRC
* Helm
  Helm stuff
  #+BEGIN_SRC emacs-lisp
    (use-package helm
      :config 
      (helm-autoresize-mode t)
      (setq helm-autoresize-max-height 30)
      (setq helm-display-header-line nil)
      (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
      (helm-mode t))
  #+END_SRC
* Evil Mode
  Evil Mode Settings and keybindings
  #+BEGIN_SRC emacs-lisp
    (use-package evil
      :init
      (setq evil-want-integration t
	    evil-want-keybinding nil
	    evil-cross-lines t)
      :config 
      (evil-mode t))
    (use-package evil-collection
      :after evil
      :config 
      (evil-collection-init)
      ;; Useful overrides for normal mode
      (general-nmap "," (general-simulate-key "C-c" :state 'normal)) ;; If i didnt add special keybinds for minor mode use the default C-c
      (general-define-key
       :states '(normal)
       :keymaps 'override
       (kbd ";") 'helm-M-x
       (kbd "g c") 'comment-line
       (kbd "g p") 'projectile-command-map
       (kbd "\\") 'helm-projectile-rg-or-project
       (kbd "|") 'helm-projectile-find-file-or-project
       (kbd "`") 'magit-status)
      )
  #+END_SRC
* Programming
** Company
   #+BEGIN_SRC emacs-lisp
     (use-package company)
     (add-hook 'after-init-hook 'global-company-mode)
     (setq company-require-match 'never
	   company-minimum-prefix-length 0
	   company-tooltip-align-annotations t
	   company-idle-delay 2
	   company-dabbrev-downcase 0
	   company-tooltip-limit 20
	   global-company-mode t)
     (eval-after-load 'company
       '(progn
	  (define-key company-active-map (kbd "S-TAB") 'company-select-previous)
	  (define-key company-active-map (kbd "<backtab>") 'company-select-previous)
	  (define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
	  (define-key company-active-map (kbd "<return>") nil)
	  (define-key company-active-map (kbd "RET") nil)
	  (define-key company-active-map (kbd "C-SPC") #'company-complete-selection)
	  (define-key company-active-map (kbd "<tab>") 'company-complete-common-or-cycle)))
   #+END_SRC
** Projectile
   #+BEGIN_SRC emacs-lisp
     (use-package helm-projectile)
     (setq projectile-enable-caching t)
     (setq projectile-file-exists-local-cache-expire (* 5 60))
     (setq projectile-file-exists-remote-cache-expire (* 10 60))
     (setq projectile-switch-project-action 'helm-projectile-find-file)
     (setq projectile-sort-order 'recently-active)
     (projectile-mode t)
   #+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp
     (use-package evil-magit)
   #+END_SRC
** Misc Programming
   #+BEGIN_SRC emacs-lisp
     (use-package autopair
       :config (autopair-global-mode t))
   #+END_SRC
* Normal Tasks
** Text
   @TODO(renzix): Add spellcheck and autocorrect???
   #+BEGIN_SRC emacs-lisp
     (setq default-major-mode 'text-mode)
     (add-hook 'text-mode-hook 'text-mode-hook-identify)
     (add-hook 'text-mode-hook 'turn-on-auto-fill)
   #+END_SRC
** Org
   Some basic configuration for org mode incluing access to executing
   python,sql,emacs-lisp and latex. Also html and pandoc stuff
   #+BEGIN_SRC emacs-lisp
     (setq-default org-display-custom-times t)
     (setq org-export-date-timestamp-format '("%e %b %Y" . "<%a %b %e %Y %H:%M>"))
     (setq org-time-stamp-custom-formats '("%e %b %Y" . "<%a %b %e %Y %H:%M>"))
     (setq org-confirm-babel-evaluate nil)
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((org . t)
	(latex . t)
	(emacs-lisp . t)
	(sql . t)
	(shell . t)
	(python . t)))
     (use-package ox-pandoc)
     (use-package htmlize)
   #+END_SRC
* Post Config
** Backups
   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist `(("." . "~/.saves"))
	   backup-by-copying t
	   delete-old-versions t
	   kept-new-versions 6
	   kept-old-versions 2
	   version-control t)
   #+END_SRC
** Misc
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-screen t)
     (setq initial-buffer-choice 'eshell)
     ;;On save it adds buffer to bookmarks. LastSave is every time and get overridden while projectile is only 
     ;;if in a projectile dir. the last one is every file that is saved gets added.
     (add-hook 'after-save-hook '(lambda () (bookmark-set "LastSave" nil)))
     (add-hook 'after-save-hook '(lambda () (if (projectile-file-exists-p (buffer-name)) (bookmark-set (concat "LastPro" (projectile-project-name)) nil))))
     (add-hook 'after-save-hook '(lambda () (bookmark-set (buffer-name) nil)))

   #+END_SRC
   
   
