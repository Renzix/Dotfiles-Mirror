#+TITLE: Emacs config
#+AUTHOR: Daniel DeBruno (Renzix)
#+TOC: true
#+PROPERTY: header-args :results silent

Hello This is my second real attempt to make a "Perfect" config. Idk
if it will ever be good enough but here it is. Note this is available
on [[https://gitlab.com/Renzix/Dotfiles][gitlab]] and it should be mirrored on [[https://github.com/Renzix/Dotfiles-Mirror][github]].

Some decisions are inspired by

[[https://jamiecollinson.com/blog/my-emacs-config/][jamiecollinson]]: General layout

* Startup

  Starts up emacs. This should be somewhat small and only for
  proccesses that are required to run first.

** Configure package sources
   <<melpa>>

   Melpa is nice because its more bleeding edge.

   #+BEGIN_SRC emacs-lisp
     (setq package-enable-at-startup nil)
     (setq package-archives
           '(("elpa"     . "https://elpa.gnu.org/packages/")
             ("melpa"        . "https://melpa.org/packages/"))
           package-archive-priorities
           '(("elpa"     . 5) ("melpa"        . 10)))

   #+END_SRC

** Bootstrap use-package
   <<use-package>>

   install =use-package= if not already installed.

   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
     (require 'use-package)
     (require 'use-package-ensure)
     (setq use-package-always-ensure t)
   #+END_SRC

   Makes sure that =use-package= always downloads the package if not available

   #+BEGIN_SRC emacs-lisp
     (setq use-package-always-ensure t)
   #+END_SRC
** Add quelpa
   <<quelpa>><<quelpa-use-package>>

   Quelpa is another way to get packages and it basically wraps around
   git repositories. Its really nice if you want bleeding edge stuff
   and also it has a [[use-package]] with the keyword :quelpa.

   #+BEGIN_SRC emacs-lisp
     (use-package quelpa
       :init (setq quelpa-upgrade-p t))
     (use-package quelpa-use-package) 
   #+END_SRC
** Increase garbage collector threshold
   <<garbage-collection>>

   The default garbage collection threshold is 800kB, increasing this
   to 10MB for startup increases speed.

   #+BEGIN_SRC emacs-lisp
     (setq gc-cons-threshold 10000000)

     ;; Restore after startup
     (add-hook 'after-init-hook
               (lambda ()
                 (setq gc-cons-threshold 1000000)
                 (message "gc-cons-threshold restored to %S"
                          gc-cons-threshold)))
   #+END_SRC

** Set custom settings to load in own file
   <<custom>>

   This stops emacs adding customised settings to =init.el=. I try to
   avoid using customize anyway, preferring programmatic control of
   variables. Creating it as a temporary file effectively disables it
   (i.e. any changes are session local).

   #+BEGIN_SRC emacs-lisp
     (setq custom-file (make-temp-file "emacs-custom"))
   #+END_SRC

* Preferences

  Some preferences I like/dont like about emacs. Basically trying to
  make the defaults better.

** Buffers

   Dont display startscreen on startup. I used to use eshell but now
   that I have ss as a keybinding I don't think its nessisary.

   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-screen t
           initial-buffer-choice nil)
   #+END_SRC

   Buffers dont ask for confirmation when killed while doing a
   job. Makes things much easier/simpler and when I close one i know
   im closing it.

   #+BEGIN_SRC emacs-lisp
     (setq confirm-kill-processes nil)
   #+END_SRC
   
   Nice little display for my battery. @TODO(Renzix): Make it so this only triggers on laptop? Also add a section for my variables.

   #+BEGIN_SRC emacs-lisp
     (display-battery-mode)
   #+END_SRC


** Display

   Some things that nobody ever should enable. Ever. menu-bar,
   tool-bar and scroll-bar all require a mouse so they suck.

   #+BEGIN_SRC emacs-lisp
     (menu-bar-mode -1)
     (tool-bar-mode -1)
     (scroll-bar-mode -1)
   #+END_SRC
   
   Disables more then 2 windows spawning as this makes magit alot more
   annoying and in general only 2 windows are nessisary.

   #+BEGIN_SRC emacs-lisp
     (setq split-width-threshold (- (window-width) 10))
     (setq split-height-threshold nil)
     (defun count-visible-buffers (&optional frame)
       "Count how many buffers are currently being shown.  Defaults to selected FRAME."
       (length (mapcar #'window-buffer (window-list frame))))
     (defun do-not-split-more-than-two-windows (window &optional horizontal)
       "WINDOW HORIZONTAL."
       (if (and horizontal (> (count-visible-buffers) 1))
           nil
         t))
     (advice-add 'window-splittable-p :before-while #'do-not-split-more-than-two-windows)
   #+END_SRC

   In evil relative line numbers are really nice. This also allows the
   current line number to not be 0 but whatever the actual line number
   it is. Having 0 is kinda useless in relative line numbers.

   #+BEGIN_SRC emacs-lisp
     (when (>= emacs-major-version 26)
       (global-display-line-numbers-mode)
       (setq-default display-line-numbers-type 'relative
                     display-line-numbers-current-absolute t
                     display-line-numbers-width 3
                     display-line-numbers-widen t))
   #+END_SRC
   
   There are alot of good themes out there and having a single theme
   is boring so I make it switch depending on the day of the
   week. Also the theme stays default if emacs is ran in the terminal
   because the themes that are good suck in the terminal and black is
   good enough.

   #+BEGIN_SRC emacs-lisp
     (when (display-graphic-p)
       (defvar renzix-weekday (format-time-string "%w"))
       (use-package doom-themes)
       (use-package apropospriate-theme)
       (use-package monokai-theme)
       (cond ((string= "0" renzix-weekday) ;; Sunday
              (load-theme 'doom-dracula t))
             ((string= "1" renzix-weekday) ;; Monday
              (load-theme 'doom-opera t))
             ((string= "2" renzix-weekday) ;; Tuesday
              (load-theme 'apropospriate-dark t))
             ((string= "3" renzix-weekday) ;; Wednesday
              (load-theme 'doom-molokai t))
             ((string= "4" renzix-weekday) ;; Thursday
              (load-theme 'doom-nord t))
             ((string= "5" renzix-weekday) ;; Friday
              (load-theme 'monokai t))
             ((string= "6" renzix-weekday) ;; Saturday
              (load-theme 'doom-one t))))
   #+END_SRC   

** Other
   By default symlinks should always be followed. Makes it much easier
   to deal with dynamic stuff like my config. Instead of asking me if
   I want to follow it.

   #+BEGIN_SRC emacs-lisp
     (setq vc-follow-symlinks t)
   #+END_SRC
   <<indent-default>>

   Use spaces instead of tabs by default. Either is fine to me however
   I have to choose one and only one.

   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+END_SRC
   
   Emacs backups are kinda weird by default as they apear in the same
   directory as the file. Also the tilda is kinda weird syntax so I
   make it a single folder and have lots of backups as I dont need the
   space.
  
   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist `(("." . "~/.saves"))
           backup-by-copying t
           delete-old-versions t
           kept-new-versions 10
           kept-old-versions 10
           version-control t)
   #+END_SRC
   
   I probably shouldnt do this but warnings are annoying and i dont
   like them so I disable them. Its mainly because a few plugins (im
   talking to you ox-pandoc) will warn you for older versions of
   software and other stupid stuff like that. Disabled because this is
   awful.
   
   #+BEGIN_SRC emacs-lisp :tangle no
     (setq warning-minimum-level :error)
   #+END_SRC
 
** Useful Functions
*** Edit Text

    Made specifically for insert state but works in other
    states. Deletes backwards until a space. Not a true vim word or
    WORD.
   
    #+BEGIN_SRC emacs-lisp
      (defun evil-insert-delete-back-word ()
        "Made specifically for insert state but works in other
      states. Deletes backwards until a space. Not a true vim word or
      WORD."
        (interactive)
        (delete-region
         (point)
         (save-excursion (skip-syntax-backward "^ ") (point))))
    #+END_SRC
   
    This is in vim but not in evil. Reverts any changes that were made
    on the current line in insert mode.

    #+BEGIN_SRC emacs-lisp
      (defun evil-insert-undo-line ()
        "Undo a line in insert mode."
        (interactive)
        (if (looking-back "^" 0)
            (backward-delete-char 1)
          (if (looking-back "^\s*" 0)
              (delete-region (point) (line-beginning-position))
            (evil-delete
             (+ (line-beginning-position) (current-indentation)) (point)))))
    #+END_SRC

*** Format Text

    #+BEGIN_SRC emacs-lisp
      (defun indent-buffer ()
        "Indent the entire buffer and untabifies it."
        (interactive)
        (save-excursion
          (indent-region (point-min) (point-max) nil)
          (untabify (point-min) (point-max))))
    #+END_SRC
   
    Smart indentation that i found [[https://www.emacswiki.org/emacs/NoTabs][here]]. Infers indentation based on
    the amount of tabs/spaces in the current buffer. If its a new
    buffer then use the [[indent-default][default value]].

    #+BEGIN_SRC emacs-lisp
      (defun infer-indentation-style ()
        (let ((space-count (how-many "^  " (point-min) (point-max)))
              (tab-count (how-many "^\t" (point-min) (point-max))))
          (if (> space-count tab-count) (setq indent-tabs-mode nil))
          (if (> tab-count space-count) (setq indent-tabs-mode t))))
    #+END_SRC



*** File Handling

    Emacs is actually stupid and if you try to rename a open file it
    wont effect the buffer. You then end up with 2 files and you have
    to either close or rename the buffer. This should be in emacs by
    default idk why its not.

    #+BEGIN_SRC emacs-lisp
      (defun rename-file-and-buffer ()
        "Renames current buffer and file it is visiting."
        (interactive)
        (let* ((name (buffer-name))
               (filename (buffer-file-name))
               (basename (file-name-nondirectory filename)))
          (if (not (and filename (file-exists-p filename)))
              (error "Buffer '%s' is not visiting a file!" name)
            (let ((new-name (read-file-name "New name: "
                                            (file-name-directory filename) basename nil basename)))
              (if (get-buffer new-name)
                  (error "A buffer named '%s' already exists!" new-name)
                (rename-file filename new-name 1)
                (rename-buffer new-name)
                (set-visited-file-name new-name)
                (set-buffer-modified-p nil)
                (message "File '%s' successfully renamed to '%s'"
                         name (file-name-nondirectory new-name)))))))
    #+END_SRC
   
    This is the same problem as the function above. Emacs does not
    close the buffer you have open if you delete the file so you might
    accidently save it. Better to just call this function if the buffer
    is open.

    #+BEGIN_SRC emacs-lisp
      (defun delete-file-and-buffer ()
        "Kill the current buffer and deletes the file it is visiting."
        (interactive)
        (let ((filename (buffer-file-name)))
          (when filename
            (if (vc-backend filename)
                (vc-delete-file filename)
              (progn
                (delete-file filename)
                (message "Deleted file %s" filename)
                (kill-buffer))))))
    #+END_SRC

*** Projects
    
    This first sees if it is in a projectile project. If it isnt then
    it will ask for one then run =projectile-find-file=. If it is then
    it will just run =projectile-find-file=. Just a better default.

    #+BEGIN_SRC emacs-lisp
      (defun helm-projectile-find-file-or-project ()
        "Does switch project if not in a project and 'find-file' if in one."
        (interactive)
        (if (projectile-project-p)
            (helm-projectile-find-file)
          (helm-projectile-switch-project)))
    #+END_SRC
   
    This first sees if it is in a projectile project. If it isnt then
    it will ask for one then both of them run =helm-projectile-ag= or
    =helm-projectile-rg= depending on if you are in windows or
    something else. I made this fix because helm-projectile-rg didnt
    work on windows but maybe i should try again later (rg does work
    on windows just not the emacs plugin).

    #+BEGIN_SRC emacs-lisp
      (defun helm-projectile-search-or-project ()
        "Does switch project if not in a project and search all files in said project."
        (interactive)
        (if (projectile-project-p)
            (if (string-equal system-type "windows-nt")
                (helm-projectile-ag)
              (helm-projectile-rg))
          (helm-projectile-switch-project)))
    #+END_SRC

    Creates tags for all the files. I need to get something like this
    that works properly on windows. @TODO(Renzix): Make a
    =projectile-create-tags= that also works on windows
   
    #+BEGIN_SRC emacs-lisp
      ;; @TODO(Renzix): Make this work in windows possibly
      (defun create-tags (dir-name)
        "Create tags file in DIR-NAME."
        (interactive "DDirectory: ")
        (eshell-command
         (format "find %s -type f -name \"*.[ch]\" | etags -" dir-name)))
    #+END_SRC

    @TODO(Renzix): remap something to C-x o
   
*** Open Buffer
    
    I like using eshell and vterm but dealing with emacs buffers is
    actually insane. I made a coupld simple functions to switch to a
    vterm/eshell window and then be able to switch back. This makes
    them fullscreen which is hella nice. This is the variable that
    stores the perspective.

    #+BEGIN_SRC emacs-lisp
      (defvar my:window-conf nil)
    #+END_SRC

    Here is the eshell toggle function which uses said variable to
    switch if not already in a eshell buffer fullscreen.

    #+BEGIN_SRC emacs-lisp
      (defun eshell-toggle (buf-name)
        "Switch to eshell and save persp.  BUF-NAME is the current buffer name."
        (interactive (list (buffer-name)))
        (if (string-equal buf-name "*eshell*")
            (set-window-configuration my:window-conf)
          (progn
            (setq my:window-conf (current-window-configuration))
            (delete-other-windows)
            (eshell))))
    #+END_SRC
    
    This is for the next funciton. vterm doesnt automatically switch
    if called and open so i need a helper function.

    #+BEGIN_SRC emacs-lisp
      (defun switch-to-vterm ()
        "Switch to vterm."
        (if (get-buffer "vterm")
            (switch-to-buffer "vterm")
          (vterm)))
    #+END_SRC
    
    Function to switch to a fullscreen terminal and back again without
    losing your current layout.

    #+BEGIN_SRC emacs-lisp
      (defun vterm-toggle (buf-name)
        "Switch to vterm and save persp.  BUF-NAME is the current buffer name."
        (interactive (list (buffer-name)))
        (if (string-equal buf-name "vterm")
            (set-window-configuration my:window-conf)
          (progn
            (setq my:window-conf (current-window-configuration))
            (delete-other-windows)
            (switch-to-vterm))))
    #+END_SRC

    Opens magit status in a single buffer because its so much easier to
    work with a do git things. I dont really need to see the file I was
    working on as I can just see the changes in =magit-status=

    #+BEGIN_SRC emacs-lisp
      (defun magit-status-only ()
        "Opens magit-status in a single buffer."
        (magit-status)
        (delete-other-windows))
    #+END_SRC

    Opens the current buffer with sudo. Again this probably should be
    default or at least some form of it as this doesnt work if you dont
    have sudo. Maybe there is a cross platform su thing for tramp? idk
   
    #+BEGIN_SRC emacs-lisp
      ;; @TODO(Renzix): Check if on a bsd for doas
      (defun sudo-edit (&optional arg)
        "Edits a file with sudo priv.  Optionally take a ARG for the filename."
        (interactive "P")
        (if (or arg (not buffer-file-name))
            (find-file
             (concat "/sudo:root@localhost:"
                     (ido-read-file-name "Find file(as root): ")))
          (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))


    #+END_SRC
   
    Opens my emacs configuration for editing.

    #+BEGIN_SRC emacs-lisp
      (defun open-emacs-config ()
        "Opens my Emacs config uwu."
        (interactive)
        (find-file "~/Dotfiles/.emacs.d/config.org"))
    #+END_SRC

* Core
** Fuzzy Find
*** Helm
    <<helm>> 

    Helm is a fuzzy finder search for ANYTHING you want in emacs. It
    also has alot of plugins that work with other plugins. The two
    alternatives is ivy and ido. Helm is the heaviest however it also
    has the most features. Ivy is the simpliest and has the smallest
    code base. Ivy is also very extendable and easier to work with
    then helm or ido. Ido comes default with emacs and is said to be
    the fastest but has a more complex code base then ivy.

    One of the big things that seperates helm from the rest is that
    there are multiple selection options per command. For example if
    you =helm-find-file= and press =RET= it will open that
    file. However if you press F2 it will open that file in another
    window.

    #+BEGIN_SRC emacs-lisp
      (use-package helm
        :config
        (helm-autoresize-mode t)
        (setq helm-autoresize-max-height 30
              helm-display-header-line nil)
        (helm-mode t))
    #+END_SRC
    <<helm-rg>> 

    Helm has a plugin you can use to use ripgrep as the search tool.

    #+BEGIN_SRC emacs-lisp
      (use-package helm-rg
        :after helm)
    #+END_SRC
   
** Version Control
*** Git
**** Magit
     <<magit>> 
     
     Magit is one of the greatest emacs packages to exist. It allows
     the power of git in a tui/gui/cli form depending on what is
     needed. Note this is disabled because it is not [[evil]] enough

     #+BEGIN_SRC emacs-lisp
       (use-package magit)
     #+END_SRC

**** Forge
     <<forge>>

     This is in beta but forge allows [[magit]] to talk to github and
     gitlab in order to deal with Pull Requests and Issues.

     #+BEGIN_SRC emacs-lisp
       (use-package forge
         :after magit)
     #+END_SRC
**** evil-magit
     <<evil-magit>> 

     [[Magit]] isnt [[evil]] enough. It doesnt have standard [[evil]] keybindings
     and rebinds stuff like j and k. evil-magit fixes this by
     rebinding them and this is one of the only packages that isnt
     supported by [[evil-collection]]. For some fucking reason this has to
     load before evil so it also needs evil-want-keybinding for
     [[evil-collection]].

     #+BEGIN_SRC emacs-lisp
       (use-package evil-magit
         :init (setq evil-want-keybinding nil))
     #+END_SRC

**** Git Timemachine
     <<git-timemachine>>

     This package allows you to go back and forth between a files git
     history. 

     #+BEGIN_SRC emacs-lisp
       (use-package git-timemachine
         :bind ("C-c g t" . 'git-timemachine-toggle))
     #+END_SRC     

**** Git Gutter
     <<git-gutter>>

     Shows changes, deletions or additions from master. Really useful
     to see what you did and what will or wont be committed without
     having to open up [[magit]].

     #+BEGIN_SRC emacs-lisp
       (use-package git-gutter 
         :config (global-git-gutter-mode)) 
     #+END_SRC
** Autocompletion
*** Company
    <<company>>
    
    Company is the newest and greatest auto completion engine for
    emacs. Technically these have binds but I am not really counting
    those as real keybindings because its only in effect during a
    completion.

    #+BEGIN_SRC emacs-lisp
      (use-package company
        :init
        (add-hook 'after-init-hook 'global-company-mode)
        (setq company-require-match 'never
              company-minimum-prefix-length 2
              company-tooltip-align-annotations t
              company-idle-delay 1
              company-tooltip-limit 20
              global-company-mode t)
        :bind (:map company-active-map
                    ("S-TAB" . company-select-previous)
                    ("<backtab>" . company-select-previous)
                    ("<return>" . nil)
                    ("RET" . nil)
                    ("C-SPC" . company-complete-selection)
                    ("TAB" . company-complete-common-or-cycle)))
    #+END_SRC
    
    This is also intergrated with [[yasnippet]] for a whole bunhc of
    functions.
     
    #+BEGIN_SRC emacs-lisp
      (defun company-mode-with-yas (backend)
        (if (and (listp backend) (member 'company-yasnippet backend))
            backend
          (append (if (consp backend) backend (list backend))
                  '(:with company-yasnippet))))

      (with-eval-after-load "company"
        (with-eval-after-load "yasnippet"
          '(setq company-backends (mapcar #'company-mode-with-yas company-backends))))
    #+END_SRC


** Projects
*** Projectile
    <<projectile>><<helm-projectile>>
    
    Projectile is a way to use specific commands for a specific
    project. A project is any folder with a source control or a
    .projectile file/folder. This is the definition of helm-projectile
    however it also installs projectile. This is also intergrated into
    [[helm]].

    #+BEGIN_SRC emacs-lisp
      (use-package helm-projectile
        :after 'helm
        :init
        (setq projectile-enable-caching t
              projectile-file-exists-local-cache-expire (* 5 60)
              projectile-file-exists-remote-cache-expire (* 10 60)
              projectile-switch-project-action 'helm-projectile-find-file
              projectile-sort-order 'recently-active)
        :config
        (projectile-mode t))
    #+END_SRC

*** Treemacs
    <<treemacs>><<treemacs-evil>><<treemacs-projectile>><<treemacs-magit>>
    
    Treemacs is a tree layout file explorer. Its useful for projects
    and has TONS of plugins to work with other plugins. It works with
    [[evil]],[[projectile]], and [[magit]]. It also should have =all-the-icons= to
    look pretty :p.

    #+BEGIN_SRC emacs-lisp
      (use-package treemacs)
      (use-package treemacs-evil
        :after '(treemacs evil))
      (use-package treemacs-projectile
        :after '(treemacs projectile))
      (use-package treemacs-magit
        :after '(treemacs magit))
      ;; Icons for treemacs
      (use-package all-the-icons)
    #+END_SRC

** Plain Text Modes
*** Org
    <<org>>
    
    Org mode is the best thing since sliced bread. It allows you to do
    Outlines, Planning, Capturing, Spreadsheets, Markup, Exporting,
    Literite Programming and much [[https://orgmode.org/][more]].

    #+BEGIN_SRC emacs-lisp
      (use-package org
        :init
        (setq-default initial-major-mode 'org-mode
                      initial-scratch-message ""
                      org-src-tab-acts-natively t
                      org-confirm-babel-evaluate nil)
        (org-babel-do-load-languages
         'org-babel-load-languages
         '((org . t)
           (C . t)
           (latex . t)
           (emacs-lisp . t)
           (sql . t)
           (shell . t)
           (python . t))))
    #+END_SRC
    <<org-rifle>><<helm-org-rifle>>
    
    Org rifle is a thing that helps me search a org mode multiple org
    mode buffers with [[helm]] I am mainly gonna use it to search for
    locations. Note this requires [[helm]]
    
    #+BEGIN_SRC emacs-lisp
      (use-package helm-org-rifle
        :after '(org helm))
    #+END_SRC

**** Org Exports
     <<ox-pandoc>><<htmlize>><<ox-twbs>><<ox-hugo>>
     There are many plugins you can install to get more exports. Here
     are the 3 that I use frequently. Pandoc is nice for docx, htmlize
     is for html and ox-twbs is for better html docs with
     twitter-bootstrap. ox-hugo because the markdown specs are awful
     and very vague so this one works on the static site generator
     [[https://gohugo.io][hugo]]. See [[https://ox-hugo.scripter.co][here]] for doucmentation on it.

     #+BEGIN_SRC emacs-lisp
       (use-package ox-pandoc
         :after org)
       (use-package htmlize
         :after org)
       (use-package ox-twbs
         :after org)
       (use-package ox-hugo
         :after org)
     #+END_SRC

**** Evil org mode
     <<evil-org>>
     [[Org]] mode is nice but [[evil]] is also very nice. Here is the only
     other one then [[magit-evil]] that doesnt have [[evil-collection]]
     keybindings.
     
     #+BEGIN_SRC emacs-lisp
       (use-package evil-org
         :after '(org evil))
     #+END_SRC
*** \LaTeX
**** Auctex
     <<latex>><<auctex>>
     
     Auctex is supposed to be really good at showing and displaying \LaTeX .

     #+BEGIN_SRC emacs-lisp
       (use-package tex
         :ensure auctex
         :config
         (setq TeX-auto-save t
               TeX-parse-self t
               TeX-view-program-selection '(((output-dvi has-no-display-manager)
                                             "dvi2tty")
                                            ((output-dvi style-pstricks)
                                             "dvips and gv")
                                            (output-dvi "xdvi")
                                            (output-pdf "mupdf")
                                            (output-html "xdg-open")))
         (add-to-list 'TeX-view-program-list '("mupdf" "mupdf %o")))
     #+END_SRC
     <<company-auctex>>
     
     It also has a [[company]] backend

     #+BEGIN_SRC emacs-lisp
       (use-package company-auctex
         :after '(company tex)
         :config (company-auctex-init))
     #+END_SRC
     

*** Markdown
    <<markdown>><<markdown-mode>>
    
    Markdown is dope and even though I would love to use org-mode for
    everything sometimes I have to edit/view markdown.

    #+BEGIN_SRC emacs-lisp
      (use-package markdown-mode)
    #+END_SRC

** Key Packages
*** Evil 
    <<evil>>
    
    Evil is vi emulation in emacs. It is by far the best vi emulation
    outside of vi itself and very extendable/fast.

    #+BEGIN_SRC emacs-lisp
      (use-package evil
        :config (evil-mode 1))
    #+END_SRC
    <<evil-collection>>
    
    =evil-collection= is a project which provides evil keybindings for
    almost every popular plugin in emacs outside of a few. Its really
    nice if you want to use evil in buffers where its very emacsy. A
    list of all keybindings and supported packages can be found
    [[https://github.com/emacs-evil/evil-collection][here]]. One of the nonsupported packages is magit so here is
    [[file:config.org::*evil-magit][evil-magit]] config. Also [[evil-magit]] has to load before evil so it
    needs to set evil-want-keybinding to nil.

    #+BEGIN_SRC emacs-lisp
      (use-package evil-collection
        :after '(evil evil-magit)
        :config (evil-collection-init))
    #+END_SRC
    <<evil-goggles>>
    
    =evil-goggles= makes it so that every edit you do is highlighted
    for a brief period of time. This makes it much easier to know
    exactly what you are doing and also looks cool af.

    #+BEGIN_SRC emacs-lisp
      (use-package evil-goggles
        :after evil
        :config (progn
                  (evil-goggles-mode)
                  (evil-goggles-use-diff-faces)))
    #+END_SRC
    <<evil-machit>>
    
    =evil-matchit= makes % work for alot of different things. All of
    them are listed [[https://github.com/redguardtoo/evil-matchit][here]].

    #+BEGIN_SRC emacs-lisp
      (use-package evil-matchit
        :after evil
        :config (global-evil-matchit-mode 1))
    #+END_SRC

*** key-chord
    <<key-chord>>
    
    key-chord allows you to make key strokes that only trigger if you
    press them fast enough. This makes for some pretty interesting
    ideas and allows you to bind a nonprefix key to a prefix.

    #+BEGIN_SRC emacs-lisp
      (use-package key-chord
        :config (key-chord-mode 1))
    #+END_SRC

** vterm
   <<vterm>>
   
   Very powerful terminal emulator as the project was started by
   neovim to create a actual terminal emulator in neovim. This should
   in theory be just as good. Unfortunately the [[https://melpa.org/][melpa]] package doesnt
   install properly so you have to [[https://github.com/akermu/emacs-libvterm][manually]] install it. These keybinds
   also don't count.

   #+BEGIN_SRC emacs-lisp
     ;;(use-package vterm)
     (eval-after-load "general"
       '(when (file-directory-p "~/Projects/NotMine/emacs-libvterm")
          (add-to-list 'load-path "~/Projects/NotMine/emacs-libvterm")
          (require 'vterm)
          (general-define-key
           :states '(normal)
           :keymaps 'vterm-mode-map
           "o" #'evil-insert-resume
           "a" #'evil-insert-resume
           "i" #'evil-insert-resume
           "<return>" #'evil-insert-resume)))
   #+END_SRC
    
** Templates/Snippets
   <<yasnippet>>

   Yasnippets is possibly cool? It's supposed to intergrate with
   [[company]] mode if I add some code which seems cool. All this does is
   add the abillity to add predefined definitions in a whole bunch of
   languages.
    
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :config (yas-global-mode))
   #+END_SRC
   <<yasnippet-snippets>>
    
   Yasnippets requires another package for some predefined snippets so
   I can actually use it without defining it myself.

   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet-snippets
       :config (yasnippet-snippets-initialize))
   #+END_SRC
    
*** Gentoo Snippets
    
    Gentoo comes with a skeleton for ebuilds which is nice. I would
    like to include it by default.

    #+BEGIN_SRC emacs-lisp
      (add-hook 'ebuild-mode-hook 'ebuild-mode-insert-skeleton)
    #+END_SRC

** Chat programs
*** Matrix
    <<matrix>>

    Matrix is nice but I know nobody on it. Too bad the emacs cilient
    is actually amazing...
    
    #+BEGIN_SRC emacs-lisp
      (use-package matrix-client
        :quelpa ((matrix-client :fetcher github :repo "alphapapa/matrix-client.el"
                                :files (:defaults "logo.png" "matrix-client-standalone.el.sh"))))
    #+END_SRC

*** Discord
**** elcord
     <<elcord>>
     
     elcord is rich presence in discord.

     #+BEGIN_SRC emacs-lisp
       (use-package elcord
         :config
         (setq elcord-use-major-mode-as-main-icon t)
         (elcord-mode))
     #+END_SRC

**** discord-api
     <<discord-api>>

     A project i have been working on uwu

     #+BEGIN_SRC emacs-lisp
       (when (file-directory-p "~/Projects/Mine/rencord")
         (add-to-list 'load-path "~/Projects/Mine/rencord")
         (require 'rencord))
     #+END_SRC
    
** Beacon
   <<beacon>>

   Beacon just shos a light to the location where the cursor moved
   to. Simple as that.

   #+BEGIN_SRC emacs-lisp
     (use-package beacon
       :config (beacon-mode 1))
   #+END_SRC
    
** Help
*** which-key
    <<which-key>>

    which-key shows keybindings as you press them making it much easier.

    #+BEGIN_SRC emacs-lisp
      (use-package which-key
        :config (which-key-mode))
    #+END_SRC

** Programming
*** Autopair
    <<autopair>>

    Autopair just adds a closing ) to your (. It also supports other
    types such as []{}<> and many more.

    #+BEGIN_SRC emacs-lisp
      ;; Misc programming stuff
      (use-package autopair
        :config (autopair-global-mode t))
    #+END_SRC

*** LSP
    <<lsp>><<lsp-mode>>
   
    lsp is basically a server that does syntax checking and stuff. The
    best part about it is its editor independant so that all the
    editors can improve it making it alot better.
   
    #+BEGIN_SRC emacs-lisp
      (use-package lsp-mode
        :hook
        ((scala-mode . lsp)
         (java-mode . lsp)
         (python-mode . lsp)
         (c-mode . lsp))
        :config (setq lsp-prefer-flymake nil))
    #+END_SRC
    <<lsp-ui>>
   
    =lsp-ui= adds a inline ui element so you can see it.

    #+BEGIN_SRC emacs-lisp
      (use-package lsp-ui
        :after lsp-mode
        :hook (lsp-mode-hook . lsp-ui-mode))
    #+END_SRC
    <<company-lsp>>
   
    lsp also has [[company]] support

    #+BEGIN_SRC emacs-lisp
      (use-package company-lsp
        :after '(company lsp-mode))
    #+END_SRC
    <<dap-mode>>

    [[lsp]] also has =dap-mode= which is in [[https://github.com/emacs-lsp/dap-mode][alpha]] and can be used to
    debug. Hopefully it gets really good eventually.

    #+BEGIN_SRC emacs-lisp
      (use-package dap-mode
        :config
        (dap-mode 1)
        (dap-ui-mode 1)
        (require 'dap-python)
        (require 'dap-java)
        (require 'dap-lldb))
    #+END_SRC

*** JVM
*** Java
    <<java>><<lsp-java>>
    
    All i have for java is a simple [[lsp]]. Maybe eventually I will hook
    up the entire eclipse server thing too.
   
    #+BEGIN_SRC emacs-lisp
      (use-package lsp-java)
    #+END_SRC

*** Scala
    <<scala>><<scala-mode>>
    
    Scala lsp is part of [[lsp-mode]] so you can enable/disable it from
    there. Here is just syntax highlighting for scala.
    
    #+BEGIN_SRC emacs-lisp
      (use-package scala-mode
        :mode "\\.s\\(cala\\|bt\\)$")
    #+END_SRC
    <<sbt>><<sbt-mode>>
    
    this is a mode for [[scala]] package manager sbt.
    
    #+BEGIN_SRC emacs-lisp
      (use-package sbt-mode
        :commands sbt-start sbt-command
        :config
        ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
        ;; allows using SPACE when in the minibuffer
        (substitute-key-definition
         'minibuffer-complete-word
         'self-insert-command
         minibuffer-local-completion-map))
    #+END_SRC

*** c and cpp
    <<c>><<cpp>><<irony>>
   
    This one uses irony server which needs to be installed. Note that
    it can be installed inside emacs. Uses [[lsp]] to do stuff.

    #+BEGIN_SRC emacs-lisp
      (use-package irony
        :hook (c++-mode-hook . irony-mode)
        :hook (objc-mode-hook . irony-mode)
        :hook (c-mode-hook . irony-mode))
    #+END_SRC
    <<company-irony>>
   
    Irony also has support for [[company]].

    #+BEGIN_SRC emacs-lisp
      (use-package company-irony
        :after '(company irony))
    #+END_SRC
    <<irony-eldoc>>
   
    This allows us to read docs while irony is working.

    #+BEGIN_SRC emacs-lisp
      (use-package irony-eldoc
        :after '(irony))
    #+END_SRC

*** Microsoft/Dotnet
*** csharp
    <<c#>><<csharp>><<csharp-mode>>
    
    csharp is still growing a emacs presence. For right now omnisharp
    is what we got and its still in beta. We also have standard syntax
    highlighting for it.

    #+BEGIN_SRC emacs-lisp
      (use-package csharp-mode)
      (use-package omnisharp
        :hook (csharp-mode-hook . omnisharp-mode)
        :config
        (add-to-list 'company-backends 'company-omnisharp)
        (add-to-list 'auto-mode-alist '("\\.xaml\\'" . xml-mode)))
    #+END_SRC
*** powershell
    <<powershell>>
    
    Just a major mode and simple repl for powershell. Nothing too
    major.

    #+BEGIN_SRC emacs-lisp
      (use-package powershell)
    #+END_SRC

*** Rust
    <<rustic>><<rust>>
   
    Rust support is alright. Most things should work ootb with rustic
    and [[lsp-mode]].

    #+BEGIN_SRC emacs-lisp
      (use-package rustic)
    #+END_SRC

*** Python
    <<python>><<lsp-python-ms>>
   
    We are using [[https://github.com/microsoft/language-server-protocol][microsofts lsp]] because its supposed to be good. Thats
    about it probably should add more. Also this is partially configured
    in [[lsp-mode]]

    #+BEGIN_SRC emacs-lisp
      (use-package lsp-python-ms)
    #+END_SRC

*** Haskell
    <<haskell>><<haskell-mode>><<lsp-haskell>><<flycheck-haskell>>
   
    Haskell is a cool language. I should probably actually learn it one
    day.

    #+BEGIN_SRC emacs-lisp
      (use-package haskell-mode)
      (use-package lsp-haskell
        :after lsp-mode)
      (use-package flycheck-haskell
        :after flycheck)
    #+END_SRC

*** perl6/Rakudo
    <<perl6>><<rakudo>><<perl6-mode>><<flycheck-perl6>>
   
    perl6 is such a cool language but its SOO slow. Feels bad. Maybe
    eventually it becomes fast and good enough to be used in
    industry. Note this doesnt have that good syntax highlighting and
    no lsp.

    #+BEGIN_SRC emacs-lisp
      (use-package perl6-mode)
      (use-package flycheck-perl6
        :after flycheck)
    #+END_SRC

*** Google
*** Dart
    <<dart>><<dart-mode>>
    
    Dart is googles new language. I doubt im ever going to use it but
    it seems cool enough to try out.

    #+BEGIN_SRC emacs-lisp
      (use-package dart-mode)
    #+END_SRC
    
*** Flycheck
    <<flycheck>><<flycheck-pos-tip>>
   
    These are my flycheck settings although most packages have their
    flycheck set to start in their own packages.

    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
        :init (global-flycheck-mode))
      (use-package flycheck-pos-tip
        :after flycheck
        :config (flycheck-pos-tip-mode))
    #+END_SRC

*** imenu
    <<imenu>><<imenu-anywhere>>
   
    Imenu is nice to have because you can intelligently view and move
    to parts of your program. This one in perticular is able to do it
    anywhere and have helm support.
  
    #+BEGIN_SRC emacs-lisp
      (use-package imenu-anywhere)
    #+END_SRC

* Keybindings

  General keybindings most of the ones i use are going to be defined here
  as a general rule of thumb i am using , instead of C-c and those are going
  to be defined in other packages. I think im going to try to make alot of
  key-chord keybindings for insert mode
  
  #+BEGIN_SRC emacs-lisp
    (use-package general)
  #+END_SRC
    
** Normal/Visual State

   #+BEGIN_SRC emacs-lisp
     (eval-after-load "general"
       '(general-define-key
         :states '(normal visual)
         "|" 'helm-mini
         "SPC" 'helm-imenu
         "_" 'evil-jump-backward
         "S" 'helm-projectile-find-file-or-project
         "s" 'helm-find-files
         ";" 'helm-M-x
         "g c c" 'comment-line
         "g c r" 'comment-or-uncomment-region
         "g =" 'indent-buffer
         "g p" 'projectile-command-map
         "\\" 'helm-projectile-search-or-project
         "U" 'undo-tree-visualize
         "Q" 'save-buffers-kill-terminal
         (general-chord "ss") 'eshell-toggle
         (general-chord "vv") 'vterm-toggle
         (general-chord "``") 'magit-status))
   #+END_SRC
  
** Insert State

   These are my keys for insert mode. They should be specifically
   about entering or deleting text

   #+BEGIN_SRC emacs-lisp
     (eval-after-load "general"
       (general-define-key
        :states '(insert)
        (general-chord "UU") 'evil-insert-undo-line
        (general-chord "uu") 'evil-insert-delete-back-word))
   #+END_SRC
  
** Ex commands
    
   The rest is my ex commands. These are things that are pretty
   useful but do not require much context.

   #+BEGIN_SRC emacs-lisp
     (evil-ex-define-cmd "cfg" 'open-emacs-config)
     (evil-ex-define-cmd "l" 'TeX-command-master)
     (evil-ex-define-cmd "q[uit]" 'delete-window)
     (evil-ex-define-cmd "bd" 'kill-this-buffer)
   #+END_SRC
