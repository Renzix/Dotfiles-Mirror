* MY 5th EMACS CONFIG I THINK

Hi this is gonna hopefully (probably not) going to be my last emacs config.
Mainly I want to make a config that

1. Uses text objects
2. Abuses native emacs features
3. Is modal at heart but may use mods if better
4. Is contextually aware
5. Fits my really weird keyboard layout (mod colemak dh with some other stuff)

   It is going to be heavily inspired by boon/evil/native emacs. Because my
   keyboard it so weird and I have Control/Alt in a very ideal location I am
   going to be using them as a alternative to shift.

** Deep into development

Here is a list of features I want

*** [4/6] Text Objects

Like vim I want a way to operate on specific areas however vim does not take
into account the current mode for said areas. The idea of vim forcing almost
all objects to movements by default is wrong in my opinion. By default it
should act on a object and with a extra key you can use normal movement is
more correct. ie instead of ci", we do r" (inner is default) or ra". Vim does
not also take into account programming state. So in my editor we can just rf.
Also the backspace operator shall NOT effect anything so that you can do
r<backspace> to go into insert mode etc or run a shell command and get the
output raw.

Operators
- [ ] Toggle/Upper/Lower Case
- [X] Take (delete t)
- [X] Treasure (copy T)
- [X] Replace (change r)
- [ ] around (R also takes a enclosure)
- [X] raku/shell (;/:)

*** [5/5] Movement

Movement is also very important to a text editor. It should have movement with
basic words and letters but also movement based on the language.

- [X] Forward/Back Letter (n o)
- [X] Up/Down line (e i)
- [X] Beginning/End of line (N O)
- [X] Forward/Back Word (E I)
- [X] Beginning/end of buffer (M-n/M-o)

*** [3/3] Command Prefix

This would be something like C-x in emacs or a leader key in vim where it has a
whole bunch of commands under a specific key. This is for extra nice tasks where
they don't have enough use to warrant a full key. There also will be another
prefix depending on the context like C-c in emacs and local leader in vim.

- [X] Normal Prefix (x with edited commads so no mods)
- [X] Mode Prefix (c)
- [X] Commands search M-x (X)

*** [3/3] Argument

Emacs lets you change arguments to functions better then any other program. You
can send lists, negative numbers, normal numbers and more. This means we can
have a argument key which is not 0-9 and reserve those for other functions or
not at all (in my specific case it is harder to press).

- [X] - for -1
- [X] numbers (0-9)
- [X] universal arg (SPC)

*** [2/2] IDE Keybinds

Even though vim and emacs have the power of a ide non of them actually use it in
native keybinds or build around it. It will for sure allow jump to definition
and find references. I have to work out the rest of the logic for this one.

- [X] goto definition (g)
- [X] find references (G)

*** [3/3] Macros

Macros are a really nice way if you know how your text editor works to do
massive amounts of work. If your text editor makes it easy to do macros it
generally has really good movement and operations. Like normal emacs I would
like if macros could also save as functions but more seamlessly.

- [X] q to start a macro
- [X] Q to stop a macro or call last defined
- [X] C-q search previous macros

*** [7/7] Buffer/Window Management

Emacs has by far the best window/buffer management with ivy/helm. I am trying to
avoid using helm because ivy seams a lot simpler. Preferably I will reach a
point with ivy where I can use it like a file manager for find-files and
bookmarks in the buffer list. For the window management aspect I will probably
only stick to 2 windows for simplicity.

- [X] w for other window
- [X] M-w to delete other windows
- [X] W to delete current window
- [X] C-w to split
- [X] p to list buffers
- [X] f for find-files
- [X] F for locate

*** [5/5] Clipboard Ring and Undo Tree

Being able to easily search your clipboard is really nice and a underrated
feature. I frequently write over my clipboard then undo a lot for no reason.
Being able to look back easily fixes this issue.

Undo however should not be in a ring but in a tree with a visualizer like what
undotree shows. This package makes going back and forth in history really nice.

- [X] splice (s)
- [X] clipboard chooser (S)
- [X] undo (z)
- [X] redo (Z)
- [X] undo-tree (M-z)

*** [2/3] Powerful Search

The first thing that people do when they start coding or editing something is
search for a specific area/file. This means that search HAS to be top tier. A
emacs style search feels better imo because of a couple reasons. There aren't
many keys on the keyboard so each key for a modal layout should be justified. A
search would require a front/back/next/previous if done the modal way (see vim).
The emacs way it just front and back (we probably could remove back) with C-s
and C-r. In "search mode" you can press other modifier keys to change how the
search works and use C-s while searching to search again. Note with vim you have
to do / searchitem RET then n. In emacs you just C-s search item C-s RET also
having the option to change how your search works before RET.

- [X] C-s and C-r for buffer
- [X] M-s for project or to open a project and search
- [ ] Replace is a bind inside isearch

*** [0/0] Debugging Support

Probably not going to be implemented but debugging support with nice keybinds
would be amazing.

*** [0/2] Jumping

- [ ] b is to jump back to previous file
- [ ] B is opposite of b

*** [2/2] Other

- [X] d to insert line below and D to insert line above and go into insert mode
  (like vim o)
- [X] a and A just like in vim

* Native emacs configuration

#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t; -*-
(setq display-line-numbers-type 'relative
      confirm-kill-emacs nil
      browse-url-browser-function 'eww-browse-url
      search-whitespace-regexp ".*"
      isearch-lax-whitespace t
      scroll-margin 3
      whitespace-style '(trailing lines-tail space-before-tab
                                  indentation space-after-tab)
      whitespace-line-column 81)

(add-hook! prog-mode-hook #'whitespace-mode)
(global-undo-tree-mode t)
#+END_SRC

* Doom Configuration

#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Fira Code" :size 12)
      doom-variable-pitch-font (font-spec :family "Fira Code") ; inherits `doom-font''s :size
      doom-unicode-font (font-spec :family "Fira Code" :size 12)
      doom-big-font (font-spec :family "Fira Code" :size 19))
(load-theme 'doom-tomorrow-night t)
#+END_SRC

* Useful functions

#+BEGIN_SRC emacs-lisp

(defun my/forward-char-no-newline ()
  (interactive)
  (if
      (let
        ((line-number (line-number-at-pos)))
        (save-excursion
          (forward-char)
        (= line-number (line-number-at-pos))))
      (forward-char)
    (insert " ")))

(defun my/mark-line (arg)
  "Select the current line and move the cursor by ARG lines IF
no region is selected.

If a region is already selected when calling this command, only move
the cursor by ARG lines."
  (interactive "p")
  (when (not (use-region-p))
    (forward-line 0)
    (set-mark-command nil))
  (forward-line arg))
(defun my/mark-nothing (arg)
  "Marks nothing"
  (interactive "p")
  (when (not (use-region-p))
    (set-mark-command nil)))

(defun my/move-previous-line ()
  "Move up the current line."
  (interactive)
  (transpose-lines 1)
  (forward-line -2)
  (indent-according-to-mode))

(defun my/move-next-line ()
  "Move down the current line."
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1)
  (indent-according-to-mode))

(defun my/run-perl-on-region (value)
    (interactive "sPerl: ")
    (shell-command-on-region
     (region-beginning)
     (region-end)
     (if (eq (region-beginning) (region-end))
         (concat "perl -E '" value "'")
       (concat "perl -pE '" value "'"))
     (buffer-substring (region-beginning) (region-end))
     t
     "*perl errors*"
     nil))

(defun my/run-shell-on-region (value)
  (interactive "s shell: ")
  (shell-command-on-region
   (region-beginning)
   (region-end)
   (concat "sh -c '" value "'")
   (buffer-substring (region-beginning) (region-end))
   t
   "*shell errors*"
   nil))

(defvar fun nil)
(defmacro movement-selection-wrapper (wrappee)
  "Wrapper around a function that adds set-mark-command. "
  (setq fun (eval wrappee))
  (let* ((wrapper (intern (concat (symbol-name fun) "-selection-wrapper")))
        (arglist (make-symbol "arglist")))
  `(defun ,wrapper (&rest ,arglist)
     ,(concat (documentation fun) "\n But I do something more.")
     ,(interactive-form fun)
     (progn
       (set-mark-command nil)
       (apply (quote ,fun) ,arglist)))))

(defun generate-movement-objects (movement)
  (setq result nil)
  (dolist (value movement result)
    (setq result
          (let* ((key (car value))
                (fun (car (cdr value)))
                (thing (movement-selection-wrapper fun)))
            (cons `(,key
                    ,thing)
                  result)))))

(defun my/find-next-char (arg char)
  "Goes to next char. Negitive argument reverses the direction. "
  (interactive "p\ncChar: ")
  (if (> arg 0) (forward-char) (backward-char))
  (search-forward (char-to-string char) nil nil arg)
  (when (> arg 0) (backward-char)))

(defun my/find-previous-char (arg char)
  "Goes to previous char. Negitive argument reverses the direction. "
  (interactive "p\ncChar: ")
  (my/find-next-char (* arg -1) char))

(defun my/till-next-char (arg char)
  "Goes to the character before char. Negitive argument reverses the direction. "
  (interactive "p\ncChar: ")
  (if (> arg 0) (forward-char) (backward-char))
  (my/find-next-char arg char)
  (if (> 0 arg) (forward-char) (backward-char)))

(defun my/till-previous-char (arg char)
  "Goes to previous char. Negitive argument reverses the direction. "
  (interactive "p\ncChar: ")
  (my/till-next-char (* arg -1) char))

;; Credit to boon https://github.com/jyp/boon for this code (also partly god mode)
(defun boon-god-control-swap (event)
  "Swap the control 'bit' in EVENT, unless C-c <event> is a prefix reserved for modes."
  (interactive (list (read-key)))
  (cond
   ((memq event '(9 13 ?{ ?} ?\[ ?\] ?$ ?& ?= ?< ?> ?: ?\; ?/ ?? ?. ?, ?' ?\" )) event)
   ((<= event 27) (+ 96 event))
   ((not (eq 0 (logand (lsh 1 26) event))) (logxor (lsh 1 26) event))
   (t (list 'control event))))

(defun boon-c-god (arg)
  "Input a key sequence, prepending C- to each key (unless such
key is already reserved for minor mode, see
`boon-god-control-swap'), and run the command bound to that
sequence."
  (interactive "P")
  (let ((keys '((control c)))
        (binding (key-binding (kbd "C-c")))
        (key-vector (kbd "C-c"))
        (prompt "C-c-"))
    (while (and binding
                (or (eq binding 'mode-specific-command-prefix)
                    ;; if using universal prefix, the above will happen.
                    (not (commandp binding))))
      (let ((key (read-key (format "%s" prompt))))
        (if (eq key ?h) (describe-bindings key-vector) ;; h -> show help
          (push (boon-god-control-swap key) keys)
          (setq key-vector (vconcat (reverse keys)))
          (setq prompt (key-description key-vector))
          (setq binding (key-binding key-vector)))))
    (cond
     ((not binding) (error "No command bound to %s" prompt))
     ((commandp binding)
      (let ((current-prefix-arg arg)) (call-interactively binding)))
     (t (error "Key not bound to a command: %s" binding)))))

(defun my/replace-char (char)
  "Replaces the current char with a new char. "
  (interactive "cChar: ")
  (delete-char 1)
  (insert-char char)
  (backward-char)
  (ryo-modal-mode t))

#+END_SRC

#+RESULTS:
: my/mark-inbetween

* Loading Packages

#+BEGIN_SRC emacs-lisp
(use-package! expand-region)
(use-package! key-chord
  :config (key-chord-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(after! counsel
  (setq ivy-use-virtual-buffers t)
  ;; Bind C-k to kill buffer from `ivy-switch-buffer'
  (defun ivy-kill-buffer ()
    (interactive)
    (ivy-set-action 'kill-buffer)
    (ivy-call))

  (define-key ivy-minibuffer-map (kbd "C-k") #'ivy-kill-buffer)

  (defun ivy-delete-file ()
    (interactive)
    (ivy-set-action 'counsel-find-file-delete)
    (ivy-call))

  (define-key ivy-minibuffer-map (kbd "C-d") #'ivy-delete-file)
  (define-key ivy-minibuffer-map (kbd "C-s") #'ivy-immediate-done)
  (define-key ivy-minibuffer-map (kbd "C-r") #'ivy-alt-done)
  (define-key ivy-minibuffer-map (kbd "RET") #'ivy-alt-done)
  (define-key ivy-minibuffer-map (kbd "C-n") #'ivy-next-line)
  (define-key ivy-minibuffer-map (kbd "C-t") #'ivy-previous-line))
(setq org-log-done 'time)
#+END_SRC

#+begin_src emacs-lisp
(after! dap-mode
  (require 'dap-gdb-lldb))
#+end_src

* RYO

#+BEGIN_SRC emacs-lisp
(after! ryo-modal
  (define-globalized-minor-mode my-global-ryo-mode ryo-modal-mode
    (lambda ()
      (unless
          (or (minibufferp)
              (string= major-mode "vterm-mode")
              (string= major-mode "magit-mode"))
        (ryo-modal-mode 1))))

  (my-global-ryo-mode 1)
  (map! "C-t" 'ryo-modal-mode
        "M-t" '+vterm/toggle)
  (key-chord-define-global "aa" 'ryo-modal-mode)
  (define-key key-translation-map (kbd "ESC") (kbd "C-t"))
  (let* ((movement
         '(("n" backward-char)
           ("e" next-line)
           ("i" previous-line)
           ("o" forward-char)
           ("E" crux-move-beginning-of-line)
           ("N" backward-word)
           ("O" forward-word)
           ("I" end-of-line)
           ("M-n" beginning-of-buffer)
           ("M-o" end-of-buffer)
           ("y" my/find-next-char)
           ("Y" my/find-previous-char)
           ("u" my/till-next-char)
           ("U" my/till-previous-char)
           ))
        (text-objects
         `(("s" er/mark-symbol :name "Symbol")
           ("SPC" my/mark-line :name "Line")
           ("q" er/mark-inside-quotes :name "Quotes")
           ("Q" er/mark-outside-quotes :name "Quotes (outside)")
           ("p" er/mark-inside-pairs :name "Pairs")
           ("P" er/mark-outside-pairs :name "Pairs (outside)")
           ("b" mark-whole-buffer :name "Buffer")
           ("<backspace>" my/mark-nothing :name "Nothing")
           ;; TODO: Add ',",{,(,[ and <
           ,@(generate-movement-objects movement))))
    (eval `(ryo-modal-keys
            ("v" ,text-objects)
            ("$" ,text-objects :then '(my/run-shell-on-region))
            ("t" ,text-objects :then '(kill-region))
            ("r" ,text-objects :then '(kill-region) :exit t)
            ("T" ,text-objects :then '(kill-ring-save))
            ("/" ,text-objects :then '(comment-or-uncomment-region))
            ,@movement)))
  (after! org
   (ryo-modal-keys
    ("|" org-fill-paragraph)))
  (ryo-modal-keys
   ;; Random stuff
   ("q" kmacro-end-or-call-macro)
   ("Q" kmacro-start-macro-or-insert-counter)
   ("C-q" counsel-kmacro)
   ("m" set-mark-command)
   ("M-E" crux-duplicate-current-line-or-region)
   ("M-e" my/move-next-line)
   ("M-i" my/move-previous-line)
   ("M-I" crux-duplicate-current-line-or-region)
   ("M-d" crux-smart-open-line)
   ("C-d" crux-smart-open-line-above)
   ("c" boon-c-god)
   ("h" my/replace-char)
   ("k" kill-this-buffer)

   ;; insert mode stuff
   ("d" crux-smart-open-line :exit t)
   ("D" crux-smart-open-line-above :exit t)
   ("a" my/forward-char-no-newline :exit t)
   ("A" end-of-line :exit t)

   ;; Buffer stuff
   ("f" find-file)
   ("F" counsel-locate)
   ("b" crux-switch-to-previous-buffer)
   ("C-f" +ivy/projectile-find-file)
   ("M-f" find-file-other-window)

   ("p" counsel-switch-buffer)
   ("P" counsel-projectile)
   ("C-p" counsel-projectile-switch-to-buffer)
   ("M-p" counsel-switch-buffer-other-window)

   ("M-s" +ivy/project-search)

   ;; undo
   ("z" undo)
   ("Z" undo-redo)
   ("M-z" undo-tree-visualize)

   ;; IDE stuff
   ("g" +lookup/definition)
   ("G" +lookup/references)
   ("M" exchange-point-and-mark)
   ("W" delete-other-windows)

   ;; Changing commands
   ("j" crux-top-join-line)
   ("s" yank)
   ("S" counsel-yank-pop))

  (ryo-modal-keys
   ;; First argument to ryo-modal-keys may be a list of keywords.
   ;; These keywords will be applied to all keybindings.
   (:norepeat t)
   ("SPC" universal-argument)
   ("-" "-")
   ("0" "C-0")
   ("1" "C-1")
   ("2" "C-2")
   ("3" "C-3")
   ("4" "C-4")
   ("5" "C-5")
   ("6" "C-6")
   ("7" "C-7")
   ("8" "C-8")
   ("9" "C-9"))

  (ryo-modal-key
   "x" '(("s" save-buffer)
         ("b" ibuffer)
         ("t" +vterm/toggle)
         ("x" counsel-M-x)
         ("k" save-buffers-kill-terminal)
         ("g" magit-status)
         ("c" +ivy/compile)
         ("o" crux-open-with)
         ("r" crux-rename-file-and-buffer)
         ("d" crux-delete-file-and-buffer)))

  (ryo-modal-key
   "w" '(("w" crux-other-window-or-switch-buffer)
         ("t" +workspace/close-window-or-workspace)
         ("s" split-window-right)
         ("o" delete-other-windows))))
#+END_SRC

#+RESULTS:
| w | crux-other-window-or-switch-buffer   |
| t | +workspace/close-window-or-workspace |
| s | split-window-right                   |
| o | delete-other-windows                 |
