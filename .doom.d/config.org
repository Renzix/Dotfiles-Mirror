#+TITLE: Emacs config
#+AUTHOR: Daniel DeBruno (Renzix)
#+EMAIL: eragon9981@gmail.com

#+DESCRIPTION: My org mode config file
#+LANGUAGE: en
#+EXPORT_FILE_NAME: ../docs/index.html

# ReadTheOrg stuff
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup

#+OPTIONS: num:nil

#+PROPERTY: header-args :results silent

* My DOOM emacs config!!!

Doom is litterally too good of me not to use it. There are alot of things i
would like to change to add to it tho.


Now that Im using doom all I have to do is worry about overriding some of the
defaults I dont like. If you havent already join the DOOM discord cuz its dope.
My old config can be found in my Dotfiles under =.emacs.d/config.org=. This
config is apart of my Dotfiles which is on a self host [[https://git.renzix.com/Renzix/Dotfiles/][gitea]], [[https://gitlab.com/Renzix/Dotfiles][gitlab]] and [[https://github.com/Renzix/Dotfiles-Mirror][github]].

** Preferences
*** Nice Variables

Default to emacs keybinds and keep evil installed so i can learn raw emacs. I
think I have used enough raw emacs bindings so I am going to switch back and do
it for certain modes ie org and terms.

#+NAME: evil
#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs nil)
(set-evil-initial-state! 'term-mode    'emacs)
(after! calc
  (set-evil-initial-state! 'calc-mode    'emacs))
(after! vterm
  (set-evil-initial-state! 'vterm-mode   'emacs))
(set-evil-initial-state! 'org-mode     'emacs)
(set-evil-initial-state! 'eshell-mode  'emacs)
#+END_SRC

*** Visual
**** Themes

Themes r cool so lets do a different one for each day

#+NAME: Theme
#+BEGIN_SRC emacs-lisp
(when (display-graphic-p)
  (defvar renzix-weekday (format-time-string "%w"))
  (cond ((string= "0" renzix-weekday) ;; Sunday
         (load-theme 'doom-dracula t))
        ((string= "1" renzix-weekday) ;; Monday
         (load-theme 'doom-opera t))
        ((string= "2" renzix-weekday) ;; Tuesday
         (load-theme 'apropospriate-dark t))
        ((string= "3" renzix-weekday) ;; Wednesday
         (load-theme 'doom-molokai t))
        ((string= "4" renzix-weekday) ;; Thursday
         (load-theme 'doom-nord t))
        ((string= "5" renzix-weekday) ;; Friday
         (load-theme 'monokai t))
        ((string= "6" renzix-weekday) ;; Saturday
         (load-theme 'doom-one t))))
#+END_SRC

**** Cursor

I like changing the cursor color based on the current mode i am in.

#+NAME: evil-cursor
#+BEGIN_SRC emacs-lisp
(setq evil-insert-state-cursor   '(bar "#FF00FF")
      evil-normal-state-cursor   '(box "#6666F6")
      evil-motion-state-cursor   '(hollow "#FFF500")
      evil-replace-state-cursor  '(hbar "#BF2222")
      evil-operator-state-cursor '(box "#FFA500")
      evil-visual-state-cursor   '(hollow "#FFFFFF")
      evil-emacs-state-cursor    '(box "#90EE90"))
(setq-default cursor-type 'bar)
(blink-cursor-mode 1)
#+END_SRC

**** Highlighting

Highlight the current line

#+NAME: highlight-line
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode)
#+END_SRC

The highlight color isnt that bright so lets fix that.

#+NAME: highlight-color
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'region nil :background "#07B") ;; blue
#+END_SRC

Highlights trailing whitespace, spaces before tabs, and characters over
line 100. Also highlight characters AT 80

#+NAME: highlight-whitespace
#+BEGIN_SRC emacs-lisp
(setq whitespace-style '(trailing lines-tail space-before-tab
                                  indentation space-after-tab)
      whitespace-line-column 81)
(add-hook! prog-mode-hook #'whitespace-mode)
(add-hook! prog-mode-hook (lambda () (highlight-regexp ".\{80\}\(.\)" 'hi-aquamarine "\\2")))
#+END_SRC

**** Relative line Numbers

relative line numbers r lit

#+NAME: line-numbers
#+BEGIN_SRC emacs-lisp
(global-display-line-numbers-mode)
(setq-default display-line-numbers-type 'relative
              display-line-numbers-current-absolute t
              display-line-numbers-width 3
              display-line-numbers-widen t)
#+END_SRC

*** Nice Functions
**** File Handling

Why isnt this already a function...

#+NAME: rename-file-and-buffer
#+BEGIN_SRC emacs-lisp

(defun my/rename-file-and-buffer ()
  "Renames current buffer and file it is visiting."
  (interactive)
  (let* ((name (buffer-name))
         (filename (buffer-file-name))
         (basename (file-name-nondirectory filename)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (let ((new-name (read-file-name "New name: "
                                      (file-name-directory filename) basename nil basename)))
        (if (get-buffer new-name)
            (error "A buffer named '%s' already exists!" new-name)
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil)
          (message "File '%s' successfully renamed to '%s'"
                   name (file-name-nondirectory new-name)))))))
#+END_SRC

This is the same problem as the function above. Emacs does not
close the buffer you have open if you delete the file so you might
accidently save it. Better to just call this function if the buffer
is open.

#+NAME: delete-file-and-buffer
#+BEGIN_SRC emacs-lisp
(defun my/delete-file-and-buffer ()
  "Kill the current buffer and deletes the file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (when filename
      (if (vc-backend filename)
          (vc-delete-file filename)
        (progn
          (delete-file filename)
          (message "Deleted file %s" filename)
          (kill-buffer))))))
#+END_SRC


Reads a string directly from a file then returns it as a string

#+NAME: get-string-from-file
#+BEGIN_SRC emacs-lisp
(defun my/get-string-from-file (filePath)
  "Return filePath's file content."
  (with-temp-buffer
    (insert-file-contents filePath)
    (buffer-string)))
#+END_SRC

**** Projects

This first sees if it is in a projectile project. If it isnt then
it will ask for one then run =projectile-find-file=. If it is then
it will just run =projectile-find-file=. Just a better default.

#+NAME: helm-projectile-find-file-or-project
#+BEGIN_SRC emacs-lisp
(defun my/helm-projectile-find-file-or-project ()
  "Does switch project if not in a project and 'find-file' if in one."
  (interactive)
  (if (projectile-project-p)
      (helm-projectile-find-file)
    (helm-projectile-switch-project)))
#+END_SRC

This one runs =helm-projectile-find-file= if in a project but
normal =helm-find-file= if not inside a project.

#+NAME: helm-projectile-find-file-or-find-file
#+BEGIN_SRC emacs-lisp
(defun my/helm-projectile-find-file-or-find-file ()
  "Does switch project if not in a project and 'find-file' if in one."
  (interactive)
  (if (projectile-project-p)
      (helm-projectile-find-file)
    (helm-find-files nil)))
#+END_SRC

This first sees if it is in a projectile project. If it isnt then
it will ask for one then both of them run =helm-projectile-ag= or
=helm-projectile-rg= depending on if you are in windows or
something else. I made this fix because helm-projectile-rg didnt
work on windows but maybe i should try again later (rg does work
on windows just not the emacs plugin). @TODO(Renzix): This is broken i should fix

#+NAME: helm-projectile-search-or-project
#+BEGIN_SRC emacs-lisp
(defun my/helm-projectile-search-or-project ()
  "Does switch project if not in a project and search all files in said project."
  (interactive)
  (if (projectile-project-p)
      (helm-projectile-ag)
    (helm-projectile-switch-project)))
#+END_SRC

**** Redefined Functions

This is C-a redefined to go to first nonwhitespace then if pressed
again go to actual start of line. Stolen from [[https://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/][here]] and from [[https://github.com/bbatsov/crux][crux]].

#+NAME: move-beginning-of-line
#+BEGIN_SRC emacs-lisp
(defun my/move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.

      Move point to the first non-whitespace character on this line.
      If point is already there, move to the beginning of the line.
      Effectively toggle between the first non-whitespace character and
      the beginning of the line.

      If ARG is not nil or 1, move forward ARG - 1 lines first.  If
      point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (move-beginning-of-line 1)
    (when (= orig-point (point))
      (back-to-indentation))))
#+END_SRC

This is a function close to evil o and O which is pretty useful in
alot of scenerios. I have 0 idea why this isnt in emacs already. This
was also mainly stolen from [[https://emacsredux.com/blog/2013/03/26/smarter-open-line/][this]] and [[https://emacsredux.com/blog/2013/06/15/open-line-above/][this]] which was based off of [[https://github.com/bbatsov/crux][crux]] emacs
extension.

#+NAME: smart-open-line
#+BEGIN_SRC emacs-lisp
(defun my/smart-open-line (arg)
  "Insert an empty line after the current line.
      Position the cursor at its beginning, according to the current mode."
  (interactive "P")
  (if arg
      (progn
        (move-beginning-of-line nil)
        (newline-and-indent)
        (forward-line -1)
        (indent-according-to-mode))
    (progn
      (move-end-of-line nil)
      (newline-and-indent))))
#+END_SRC

**** Other Functions

I like indentation so lets indent smartly.

#+NAME: smart-indent
#+BEGIN_SRC emacs-lisp
(defun my/smart-indent ()
  "If a region is selected indent that.
If given ARG indent the current line.
Else indent the entire buffer."
  (interactive)
  (save-excursion
    (if (region-active-p) (progn
                            (indent-region (region-beginning) (region-end))
                            (message "Indenting region")))
    (if current-prefix-arg
        (progn
          (indent-region (line-beginning-position) (line-end-position))
          (message "Indenting line"))
      (progn
        (indent-region (point-min) (point-max))
        (message "Identing buffer")))))
#+END_SRC

** Packages
*** Org

I need to set plantuml path soo lets do that

#+NAME: plantuml-path
#+BEGIN_SRC emacs-lisp
(setq org-plantuml-jar-path "/usr/share/java/plantuml/plantuml.jar")
#+END_SRC

*** IRC

Doom uses circe. rcirc is also pretty nice also Im just gonna config this with
:pass. Note that for some weird reason this doesnt work on my gentoo install


#+NAME: irc
#+BEGIN_SRC emacs-lisp
(set-irc-server! "chat.freenode.net"
                 `(
                   :tls t
                   :port 6697
                   :nick "Renzix"
                   :sasl-username ,(+pass-get-user "irc/freenode.net")
                   :sasl-password (lambda (&rest _) (+pass-get-secret "irc/freenode.net"))
                   :channels ("#emacs" "#kisslinux")))
#+END_SRC

*** Helm

Helm is dope. I want to make it look better as I dont like the "minimal" look
that doom gives it. Thats only really good for ivy...

#+NAME: helm
#+BEGIN_SRC emacs-lisp
(after! helm
  (setq helm-mode-line-string t))
#+END_SRC

*** whole-line-or-region

Allows me to delete lines easily like dd with C-w

#+NAME: whole-line-or-region
#+BEGIN_SRC emacs-lisp
(after! whole-line-or-region
  (whole-line-or-region-global-mode t))
#+END_SRC

*** elcord

Discord rich presence.

#+NAME: elcord
#+BEGIN_SRC emacs-lisp
(after! elcord
  (elcord-mode t))
#+END_SRC
** Keybindings
*** Global

Some global binds for everything

#+NAME: keybinds
#+BEGIN_SRC emacs-lisp
(map!
 :nve "C-x t"   #'+eshell/here
 :nve "C-x C-t" #'+vterm/here
 (:map override
   :nvei "M-x"   (lambda! (message "use C-; or ; dumbass")))) ;; if i bind C-;...
#+END_SRC

*** Global Emacs

Emacs bindings arent half bad. Note that DOOM's alt key is M-SPC

#+NAME: emacs-keybinds
#+BEGIN_SRC emacs-lisp
(map!
 :e "C-x C-k" #'kill-this-buffer
 :e "C-x g"   #'magit-status
 :e "C-a"     #'my/move-beginning-of-line
 :e "C-e"     #'end-of-line
 :e "C-j"     #'avy-goto-char-2
 :e "C-\\"    #'er/expand-region
 :e "C-="     #'my/smart-indent
 :e "C-o"     #'my/smart-open-line
 :e "C-w"     #'whole-line-or-region-kill-region
 :e "C-u"     #'universal-argument ;; Doom rebinds this idk why
 (:map override
   :e "C-;"   #'helm-M-x ;; I dont know if i shoud have this or not
   :e "C-:"   #'evil-ex
   :e "M-p"   #'projectile-command-map
   :e "C-'"   #'helm-find-files
   :e "C-\""  #'helm-mini
   :e "M-'"   #'my/helm-projectile-find-file-or-project
   :e "M-\""  #'helm-projectile-ag))
#+END_SRC

*** Global Evil

Evil keybinds are really cool and interesting because I can rebind 1 click keys.

#+NAME: evil-keybinds
#+BEGIN_SRC emacs-lisp
(map!
 :nv "g p"   #'projectile-command-map
 :nv "g ="   #'my/smart-indent
 (:map override
   :nv ";"   #'helm-M-x
   :nv "|"   #'helm-mini
   :nv "s"   #'helm-find-files
   :nv "S"   #'my/helm-projectile-find-file-or-project
   :nv "U"   #'undo-tree-visualize ;; in vi U is undo line changes so you can undo the undo
   :nv "Q"   #'save-buffers-kill-terminal
   :nv "\\"  #'helm-projectile-ag))
;; @NOTE(Renzix) that I made these from evil functions to emacs function
;; for more compatibility and to make sure it works as expected.
(evil-ex-define-cmd "cfg" (lambda! (progn (find-file "~/Dotfiles/.doom.d/config.org")) (evil-normal-state)))
(evil-ex-define-cmd "pack[age]" (lambda! (find-file "~/Dotfiles/.doom.d/packages.el")))
(evil-ex-define-cmd "init" (lambda! (find-file "~/Dotfiles/.doom.d/init.el")))
(evil-ex-define-cmd "q[uit]" 'delete-window)
(evil-ex-define-cmd "bd" 'kill-this-buffer)
#+END_SRC

*** Helm

I actually enjoy the helm defaults so we should use that.

#+NAME: helm-keybinds
#+BEGIN_SRC emacs-lisp
(map! (:map helm-map
        "C-i"   #'helm-select-action
        "C-j"   #'helm-execute-persistent-action
        "<tab>" #'helm-select-action ))
#+END_SRC

*** Org

Org folding is broken in doom because it uses +fold/toggle instead of
+org/toggle-fold.

#+NAME: org-mode-keybindings
#+BEGIN_SRC emacs-lisp
(map! :map org-mode-map
      "TAB" #'org/toggle-fold)
#+END_SRC
*** vterm

vterm should use mostly vterm-self-insert binds

#+NAME: vterm-keybinds
#+BEGIN_SRC emacs-lisp
(map! :map vterm-mode-map
      :e "C-a" #'vterm--self-insert
      :e "C-e" #'vterm--self-insert
      :e "C-r" #'vterm--self-insert
      :e "C-s" #'vterm--self-insert
      :e "C-u" #'vterm--self-insert
      :e "C-x u" #'vterm--self-insert
      :e "C-/" #'vterm--self-insert
      :e "C-y" #'vterm--self-insert
      :e "M-y" #'vterm--self-insert)
#+END_SRC
